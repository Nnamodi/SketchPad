Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n\r\n    <application\r\n        android:name=\".SketchPadApp\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:resizeableActivity=\"false\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Splash\"\r\n        tools:targetApi=\"31\"\r\n        tools:ignore=\"DiscouragedApi\">\r\n        <activity\r\n            android:name=\".ui.MainActivity\"\r\n            android:exported=\"true\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustResize\"\r\n            tools:ignore=\"LockedOrientationActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision bddbfe91a68fa8935c847b10b9ca7084c7b0d7a4)
+++ b/app/src/main/AndroidManifest.xml	(date 1723485475491)
@@ -26,6 +26,23 @@
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
+
+
+            <intent-filter>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="text/plain" />
+            </intent-filter>
+
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:mimeType="text/html" />
+                <data android:scheme="https" />
+                <data android:host="www.example.com" />    <!-- we'll change to our customized url -->
+            </intent-filter>
+
         </activity>
     </application>
 
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.navigationBars\r\nimport androidx.compose.foundation.layout.windowInsetsPadding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.compose.rememberNavController\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.components.NavBar\r\nimport dev.borisochieng.sketchpad.ui.navigation.AppRoute\r\nimport dev.borisochieng.sketchpad.ui.navigation.NavActions\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.Root\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.data.activityChooser\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.data.checkAndAskPermission\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.data.saveImage\r\nimport dev.borisochieng.sketchpad.ui.theme.AppTheme\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.Theme_SketchPad)\r\n        super.onCreate(savedInstanceState)\r\n        //enableEdgeToEdge()\r\n        setContent {\r\n            Root(window = window) {\r\n                val navController = rememberNavController()\r\n                val navActions = NavActions(navController)\r\n                AppTheme {\r\n                    Scaffold(\r\n                        modifier = Modifier.windowInsetsPadding(WindowInsets.navigationBars),\r\n                        bottomBar = { NavBar(navController) }\r\n                    ) { innerPadding ->\r\n                        AppRoute(\r\n                            paddingValues = innerPadding,\r\n                            navActions = navActions,\r\n                            navController = navController,\r\n                            saveImage = {\r\n                                checkAndAskPermission {\r\n                                    CoroutineScope(Dispatchers.IO).launch {\r\n                                        val uri = saveImage(it)\r\n                                        withContext(Dispatchers.Main) {\r\n                                            startActivity(activityChooser(uri))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt	(revision bddbfe91a68fa8935c847b10b9ca7084c7b0d7a4)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt	(date 1723498074394)
@@ -1,5 +1,6 @@
 package dev.borisochieng.sketchpad.ui
 
+import android.content.Intent
 import android.os.Bundle
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
@@ -51,10 +52,20 @@
                                         }
                                     }
                                 }
+
                             }
                         )
                     }
                 }
+            }
+        }
+
+        if (intent?.action == Intent.ACTION_VIEW) {
+            val sharedUri = intent.data
+            sharedUri?.let {
+                // Handle the received URI here
+                // For example, display it in a TextView:
+
             }
         }
     }
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/Menus.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard.alt\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.rounded.Brush\r\nimport androidx.compose.material.icons.rounded.LineWeight\r\nimport androidx.compose.material.icons.rounded.Save\r\nimport androidx.compose.material.icons.rounded.TouchApp\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.scale\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.screens.dialog.ColorPickerDialog\r\nimport dev.borisochieng.sketchpad.ui.screens.dialog.SizePickerDialog\r\n\r\n@Composable\r\nfun PaletteMenu(\r\n\tmodifier: Modifier = Modifier,\r\n\tdrawMode: DrawMode,\r\n\tselectedColor: Color,\r\n\tpencilSize: Float,\r\n\tonColorChanged: (Color) -> Unit,\r\n\tonSizeChanged: (Float) -> Unit,\r\n\tonDrawModeChanged: (DrawMode) -> Unit\r\n) {\r\n\tvar currentDrawMode = drawMode\r\n\tval openColorPickerDialog = remember { mutableStateOf(false) }\r\n\tval openSizePickerDialog = remember { mutableStateOf(false) }\r\n\r\n\tRow(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.padding(16.dp)\r\n\t\t\t.clip(MaterialTheme.shapes.large)\r\n\t\t\t.background(Color.LightGray)\r\n\t\t\t.padding(8.dp),\r\n\t\thorizontalArrangement = Arrangement.SpaceAround,\r\n\t\tverticalAlignment = Alignment.CenterVertically\r\n\t) {\r\n\t\tIconButton(\r\n\t\t\tonClick = {\r\n\t\t\t\tcurrentDrawMode = if (currentDrawMode == DrawMode.Touch) DrawMode.Draw else DrawMode.Touch\r\n\t\t\t\tonDrawModeChanged(currentDrawMode)\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\timageVector = Icons.Rounded.TouchApp,\r\n\t\t\t\tcontentDescription = \"Touch mode\",\r\n\t\t\t\ttint = if (currentDrawMode == DrawMode.Touch) Color.Black else Color.Gray\r\n\t\t\t)\r\n\t\t}\r\n\t\tPencil(\r\n\t\t\tcurrentDrawMode = currentDrawMode,\r\n\t\t\tselectedColor = selectedColor,\r\n\t\t\tonColorButtonClicked = { openColorPickerDialog.value = true },\r\n\t\t\tonDrawModeChanged = onDrawModeChanged,\r\n\t\t\tonSizeButtonClicked = { openSizePickerDialog.value = true }\r\n\t\t)\r\n\t\tIconButton(\r\n\t\t\tonClick = {\r\n\t\t\t\tcurrentDrawMode = if (currentDrawMode == DrawMode.Erase) DrawMode.Draw else DrawMode.Erase\r\n\t\t\t\tonDrawModeChanged(currentDrawMode)\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\tpainter = painterResource(R.drawable.eraser_icon),\r\n\t\t\t\tcontentDescription = \"Erase mode\",\r\n\t\t\t\tmodifier = Modifier.scale(0.5f),\r\n\t\t\t\ttint = if (currentDrawMode == DrawMode.Erase) Color.Black else Color.Gray\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tif (openSizePickerDialog.value) {\r\n\t\tSizePickerDialog(\r\n\t\t\tselectedSize = pencilSize,\r\n\t\t\tcolor = selectedColor,\r\n\t\t\tonSelected = onSizeChanged,\r\n\t\t\tonDismiss = { openSizePickerDialog.value = false }\r\n\t\t)\r\n\t}\r\n\r\n\tif (openColorPickerDialog.value) {\r\n\t\tColorPickerDialog(\r\n\t\t\tselectedColor = selectedColor,\r\n\t\t\tonSelected = onColorChanged,\r\n\t\t\tonDismiss = { openColorPickerDialog.value = false }\r\n\t\t)\r\n\t}\r\n}\r\n\r\n@Composable\r\nfun PaletteTopBar(\r\n\tmodifier: Modifier = Modifier,\r\n\tcanSave: Boolean,\r\n\tcanUndo: Boolean,\r\n\tcanRedo: Boolean,\r\n\tonSaveClicked: () -> Unit,\r\n\tunUndoClicked: () -> Unit,\r\n\tunRedoClicked: () -> Unit,\r\n\tonExportClicked: () -> Unit\r\n) {\r\n\tRow(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.padding(horizontal = 16.dp)\r\n\t\t\t.clip(MaterialTheme.shapes.large)\r\n\t\t\t.background(Color.LightGray)\r\n\t\t\t.padding(8.dp),\r\n\t\thorizontalArrangement = Arrangement.SpaceAround,\r\n\t\tverticalAlignment = Alignment.CenterVertically\r\n\t) {\r\n\t\tIconButton(\r\n\t\t\tonClick = onSaveClicked,\r\n\t\t\tenabled = canSave && canUndo\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\timageVector = Icons.Rounded.Save,\r\n\t\t\t\tcontentDescription = \"Save sketch\"\r\n\t\t\t)\r\n\t\t}\r\n\t\tIconButton(\r\n\t\t\tonClick = unUndoClicked,\r\n\t\t\tenabled = canUndo\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\tpainter = painterResource(R.drawable.ic_undo),\r\n\t\t\t\tcontentDescription = \"Undo\"\r\n\t\t\t)\r\n\t\t}\r\n\t\tIconButton(\r\n\t\t\tonClick = unRedoClicked,\r\n\t\t\tenabled = canRedo\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\tpainter = painterResource(R.drawable.ic_redo),\r\n\t\t\t\tcontentDescription = \"Redo\"\r\n\t\t\t)\r\n\t\t}\r\n\t\tIconButton(\r\n\t\t\tonClick = onExportClicked,\r\n\t\t\tenabled = canUndo\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\tpainter = painterResource(R.drawable.ic_download),\r\n\t\t\t\tcontentDescription = \"Export sketch\"\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@Composable\r\nprivate fun Pencil(\r\n\tcurrentDrawMode: DrawMode,\r\n\tselectedColor: Color,\r\n\tonColorButtonClicked: () -> Unit,\r\n\tonDrawModeChanged: (DrawMode) -> Unit,\r\n\tonSizeButtonClicked: () -> Unit\r\n) {\r\n\tvar drawMode = currentDrawMode\r\n\r\n\tRow(\r\n\t\tmodifier = Modifier\r\n\t\t\t.clip(MaterialTheme.shapes.large)\r\n\t\t\t.background(Color.Gray)\r\n\t\t\t.padding(4.dp),\r\n\t\thorizontalArrangement = Arrangement.spacedBy(6.dp),\r\n\t\tverticalAlignment = Alignment.CenterVertically\r\n\t) {\r\n\t\tIconButton(\r\n\t\t\tonClick = {\r\n\t\t\t\tif (drawMode == DrawMode.Draw) return@IconButton\r\n\t\t\t\tdrawMode = DrawMode.Draw\r\n\t\t\t\tonDrawModeChanged(drawMode)\r\n\t\t\t}\r\n\t\t) {\r\n\t\t\tIcon(\r\n\t\t\t\timageVector = Icons.Rounded.Brush,\r\n\t\t\t\tcontentDescription = \"Drawing mode\",\r\n\t\t\t\ttint = if (drawMode == DrawMode.Draw) Color.Black else Color.LightGray\r\n\t\t\t)\r\n\t\t}\r\n\t\tBox(\r\n\t\t\tModifier\r\n\t\t\t\t.size(24.dp)\r\n\t\t\t\t.clip(CircleShape)\r\n\t\t\t\t.background(selectedColor)\r\n\t\t\t\t.border(1.dp, Color.White, CircleShape)\r\n\t\t\t\t.clickable { onColorButtonClicked() }\r\n\t\t)\r\n\t\tIconButton(onClick = { onSizeButtonClicked() }) {\r\n\t\t\tIcon(\r\n\t\t\t\timageVector = Icons.Rounded.LineWeight,\r\n\t\t\t\tcontentDescription = \"Pencil size\",\r\n\t\t\t\ttint = Color.Black\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nenum class DrawMode {\r\n\tDraw, Erase, Touch\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/Menus.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/Menus.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/Menus.kt	(revision bddbfe91a68fa8935c847b10b9ca7084c7b0d7a4)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/Menus.kt	(date 1723485236574)
@@ -165,6 +165,8 @@
 				contentDescription = "Export sketch"
 			)
 		}
+		ShareButton(uriToShare = "www.example.com")
+
 	}
 }
 
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/DrawingBoard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard.alt\r\n\r\nimport android.graphics.Bitmap\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.gestures.detectDragGestures\r\nimport androidx.compose.foundation.gestures.rememberTransformableState\r\nimport androidx.compose.foundation.gestures.transformable\r\nimport androidx.compose.foundation.layout.BoxWithConstraints\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableFloatStateOf\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.StrokeCap\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.input.pointer.pointerInput\r\nimport androidx.compose.ui.platform.ComposeView\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\nimport dev.borisochieng.sketchpad.ui.screens.dialog.NameSketchDialog\r\nimport dev.borisochieng.sketchpad.ui.screens.dialog.Sizes\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.SketchPadActions\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.data.BitmapFactory.getBitmap\r\n\r\n@Composable\r\nfun DrawingBoard(\r\n\tsketch: Sketch?,\r\n\texportSketch: (Bitmap) -> Unit,\r\n\tactions: (SketchPadActions) -> Unit,\r\n\tnavigate: (Screens) -> Unit\r\n) {\r\n\tval absolutePaths = remember { mutableStateListOf<PathProperties>() }\r\n\tvar paths by remember { mutableStateOf<List<PathProperties>>(emptyList()) }\r\n\tvar drawMode by remember { mutableStateOf(DrawMode.Draw) }\r\n\tvar pencilSize by remember { mutableFloatStateOf(Sizes.Small.strokeWidth) }\r\n\tvar color by remember { mutableStateOf(Color.Black) }\r\n\tvar scale by remember { mutableFloatStateOf(1f) }\r\n\tvar offset by remember { mutableStateOf(Offset.Zero) }\r\n\tval openNameSketchDialog = rememberSaveable { mutableStateOf(false) }\r\n\tval scope = rememberCoroutineScope()\r\n\tval context = LocalContext.current\r\n\tvar sketchBitmap: Bitmap? = null\r\n\tval save: (String?) -> Unit = { name ->\r\n\t\tval action = if (name == null) {\r\n\t\t\tSketchPadActions.UpdateSketch(paths)\r\n\t\t} else {\r\n\t\t\topenNameSketchDialog.value = false\r\n\t\t\tval newSketch = Sketch(name = name, pathList = paths)\r\n\t\t\tSketchPadActions.SaveSketch(newSketch)\r\n\t\t}\r\n\t\tactions(action)\r\n\t\tToast.makeText(context, \"Sketch saved\", Toast.LENGTH_SHORT).show()\r\n\t\tnavigate(Screens.Back)\r\n\t}\r\n\r\n\tScaffold(\r\n\t\ttopBar = {\r\n\t\t\tPaletteTopBar(\r\n\t\t\t\tcanSave = paths != sketch?.pathList,\r\n\t\t\t\tcanUndo = paths.isNotEmpty(),\r\n\t\t\t\tcanRedo = paths.size < absolutePaths.size,\r\n\t\t\t\tonSaveClicked = {\r\n\t\t\t\t\tif (sketch == null) {\r\n\t\t\t\t\t\topenNameSketchDialog.value = true\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsave(null)\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tunUndoClicked = { paths -= paths.last() },\r\n\t\t\t\tunRedoClicked = {\r\n\t\t\t\t\tval nextPath = absolutePaths[paths.size]\r\n\t\t\t\t\tpaths += nextPath\r\n\t\t\t\t},\r\n\t\t\t\tonExportClicked = {\r\n\t\t\t\t\tsketchBitmap?.let {\r\n\t\t\t\t\t\texportSketch(it)\r\n\t\t\t\t\t} ?: Toast.makeText(context, \"Oops... Unable to export sketch\", Toast.LENGTH_SHORT).show()\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t},\r\n\t\tcontainerColor = Color.White\r\n\t) { paddingValues ->\r\n\t\tLaunchedEffect(sketch) {\r\n\t\t\tsketch?.let {\r\n\t\t\t\tabsolutePaths.clear(); paths = emptyList()\r\n\t\t\t\tabsolutePaths.addAll(sketch.pathList)\r\n\t\t\t\tpaths = sketch.pathList\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tBoxWithConstraints(\r\n\t\t\tmodifier = Modifier\r\n\t\t\t\t.fillMaxSize()\r\n\t\t\t\t.padding(paddingValues),\r\n\t\t\tcontentAlignment = Alignment.BottomCenter\r\n\t\t) {\r\n\t\t\tval state = rememberTransformableState { zoomChange, panChange, _ ->\r\n\t\t\t\tif (drawMode != DrawMode.Touch) return@rememberTransformableState\r\n\t\t\t\tscale = (scale * zoomChange).coerceIn(1f, 5f)\r\n\r\n\t\t\t\tval extraWidth = (scale - 1) * constraints.maxWidth\r\n\t\t\t\tval extraHeight = (scale - 1) * constraints.maxHeight\r\n\r\n\t\t\t\tval maxX = extraWidth / 2\r\n\t\t\t\tval maxY = extraHeight / 2\r\n\r\n\t\t\t\toffset = Offset(\r\n\t\t\t\t\tx = (offset.x + scale * panChange.x).coerceIn(-maxX, maxX),\r\n\t\t\t\t\ty = (offset.y + scale * panChange.y).coerceIn(-maxY, maxY)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tAndroidView(\r\n\t\t\t\tfactory = {\r\n\t\t\t\t\tComposeView(context).apply {\r\n\t\t\t\t\t\tsetContent {\r\n\t\t\t\t\t\t\tCanvas(\r\n\t\t\t\t\t\t\t\tmodifier = Modifier\r\n\t\t\t\t\t\t\t\t\t.fillMaxSize()\r\n\t\t\t\t\t\t\t\t\t.background(Color.White)\r\n\t\t\t\t\t\t\t\t\t.graphicsLayer {\r\n\t\t\t\t\t\t\t\t\t\tscaleX = scale\r\n\t\t\t\t\t\t\t\t\t\tscaleY = scale\r\n\t\t\t\t\t\t\t\t\t\ttranslationX = offset.x\r\n\t\t\t\t\t\t\t\t\t\ttranslationY = offset.y\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t.transformable(state)\r\n\t\t\t\t\t\t\t\t\t.pointerInput(true) {\r\n\t\t\t\t\t\t\t\t\t\tif (drawMode == DrawMode.Touch) return@pointerInput\r\n\t\t\t\t\t\t\t\t\t\tdetectDragGestures { change, dragAmount ->\r\n\t\t\t\t\t\t\t\t\t\t\tchange.consume()\r\n\t\t\t\t\t\t\t\t\t\t\tval eraseMode = drawMode == DrawMode.Erase\r\n\t\t\t\t\t\t\t\t\t\t\tval path = PathProperties(\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor = when (drawMode) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tDrawMode.Erase -> Color.White\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tDrawMode.Draw -> color\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse -> Color.Transparent\r\n\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\teraseMode = eraseMode,\r\n\t\t\t\t\t\t\t\t\t\t\t\tstart = change.position - dragAmount,\r\n\t\t\t\t\t\t\t\t\t\t\t\tend = change.position,\r\n\t\t\t\t\t\t\t\t\t\t\t\tstrokeWidth = pencilSize\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tpaths += path\r\n\t\t\t\t\t\t\t\t\t\t\tabsolutePaths.clear()\r\n\t\t\t\t\t\t\t\t\t\t\tabsolutePaths.addAll(paths)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tpaths.forEach { path ->\r\n\t\t\t\t\t\t\t\t\tdrawLine(\r\n\t\t\t\t\t\t\t\t\t\tcolor = path.color,\r\n\t\t\t\t\t\t\t\t\t\tstart = path.start,\r\n\t\t\t\t\t\t\t\t\t\tend = path.end,\r\n\t\t\t\t\t\t\t\t\t\tstrokeWidth = path.strokeWidth,\r\n\t\t\t\t\t\t\t\t\t\tcap = StrokeCap.Round\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tLaunchedEffect(paths) {\r\n\t\t\t\t\t\t\t\tthis@apply.getBitmap(scope) { bitmap, error ->\r\n\t\t\t\t\t\t\t\t\tsketchBitmap = bitmap\r\n\t\t\t\t\t\t\t\t\terror?.let {\r\n\t\t\t\t\t\t\t\t\t\tToast.makeText(context, it.message, Toast.LENGTH_SHORT).show()\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tmodifier = Modifier.fillMaxSize()\r\n\t\t\t)\r\n\r\n\t\t\tPaletteMenu(\r\n\t\t\t\tdrawMode = drawMode,\r\n\t\t\t\tselectedColor = color,\r\n\t\t\t\tpencilSize = pencilSize,\r\n\t\t\t\tonColorChanged = { color = it },\r\n\t\t\t\tonSizeChanged = { pencilSize = it },\r\n\t\t\t\tonDrawModeChanged = { drawMode = it }\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (openNameSketchDialog.value) {\r\n\t\t\tNameSketchDialog(\r\n\t\t\t\tonNamed = { name -> save(name) },\r\n\t\t\t\tonDismiss = { openNameSketchDialog.value = false }\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tDisposableEffect(Unit) {\r\n\t\t\tonDispose { actions(SketchPadActions.SketchClosed) }\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/DrawingBoard.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/DrawingBoard.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/DrawingBoard.kt	(revision bddbfe91a68fa8935c847b10b9ca7084c7b0d7a4)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/DrawingBoard.kt	(date 1723498074329)
@@ -27,6 +27,7 @@
 import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.StrokeCap
+import androidx.compose.ui.graphics.asAndroidBitmap
 import androidx.compose.ui.graphics.graphicsLayer
 import androidx.compose.ui.input.pointer.pointerInput
 import androidx.compose.ui.platform.ComposeView
@@ -38,6 +39,7 @@
 import dev.borisochieng.sketchpad.ui.screens.dialog.Sizes
 import dev.borisochieng.sketchpad.ui.screens.drawingboard.SketchPadActions
 import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.BitmapFactory.getBitmap
+import io.ak1.drawbox.rememberDrawController
 
 @Composable
 fun DrawingBoard(
@@ -46,6 +48,7 @@
 	actions: (SketchPadActions) -> Unit,
 	navigate: (Screens) -> Unit
 ) {
+	val drawController = dev.borisochieng.sketchpad.ui.screens.drawingboard.data.rememberDrawController()
 	val absolutePaths = remember { mutableStateListOf<PathProperties>() }
 	var paths by remember { mutableStateOf<List<PathProperties>>(emptyList()) }
 	var drawMode by remember { mutableStateOf(DrawMode.Draw) }
@@ -89,10 +92,12 @@
 					paths += nextPath
 				},
 				onExportClicked = {
-					sketchBitmap?.let {
+
+					drawController.saveBitmap()
+				/*	sketchBitmap?.let {
 						exportSketch(it)
 					} ?: Toast.makeText(context, "Oops... Unable to export sketch", Toast.LENGTH_SHORT).show()
-				}
+				*/}
 			)
 		},
 		containerColor = Color.White
@@ -130,7 +135,15 @@
 			AndroidView(
 				factory = {
 					ComposeView(context).apply {
+
 						setContent {
+							LaunchedEffect(drawController) {
+								drawController.trackBitmaps(this@apply, this, onCaptured = { imageBitmap, error ->
+									imageBitmap?.let {
+										exportSketch(it.asAndroidBitmap())
+									}
+								})
+							}
 							Canvas(
 								modifier = Modifier
 									.fillMaxSize()
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/BitmapFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard.data\r\n\r\nimport android.app.Activity\r\nimport android.graphics.Bitmap\r\nimport android.os.Build\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.PixelCopy\r\nimport android.view.View\r\nimport androidx.core.view.doOnLayout\r\nimport androidx.core.view.drawToBitmap\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.flow.MutableSharedFlow\r\nimport kotlinx.coroutines.flow.asSharedFlow\r\nimport kotlinx.coroutines.flow.catch\r\nimport kotlinx.coroutines.flow.launchIn\r\nimport kotlinx.coroutines.flow.mapNotNull\r\nimport kotlinx.coroutines.flow.onEach\r\nimport kotlin.coroutines.resume\r\nimport kotlin.coroutines.resumeWithException\r\nimport kotlin.coroutines.suspendCoroutine\r\n\r\nobject BitmapFactory {\r\n\tprivate val _bitmapGenerators = MutableSharedFlow<Bitmap.Config>(extraBufferCapacity = 1)\r\n\tprivate val bitmapGenerators = _bitmapGenerators.asSharedFlow()\r\n\r\n\tfun View.getBitmap(\r\n\t\tcoroutineScope: CoroutineScope,\r\n\t\tonCaptured: (Bitmap?, Throwable?) -> Unit\r\n\t): Job {\r\n//\t\t_bitmapGenerators.tryEmit(Bitmap.Config.ARGB_8888) // causes terrible lag on canvas\r\n\t\treturn bitmapGenerators\r\n\t\t\t.mapNotNull { config -> drawBitmapFromView(config) }\r\n\t\t\t.onEach { bitmap -> onCaptured(bitmap, null) }\r\n\t\t\t.catch { error -> onCaptured(null, error) }\r\n\t\t\t.launchIn(coroutineScope)\r\n\t}\r\n}\r\n\r\nprivate suspend fun View.drawBitmapFromView(\r\n\tconfig: Bitmap.Config,\r\n): Bitmap = suspendCoroutine { continuation ->\r\n\tdoOnLayout { view ->\r\n\t\tif (Build.VERSION_CODES.O > Build.VERSION.SDK_INT) {\r\n\t\t\tcontinuation.resume(view.drawToBitmap(config))\r\n\t\t\treturn@doOnLayout\r\n\t\t}\r\n\r\n\t\tval window = (context as? Activity)?.window\r\n\t\t\t?: error(\"Can't get window from the Context\")\r\n\r\n\t\tBitmap.createBitmap(width, height, config).apply {\r\n\t\t\tval (x, y) = IntArray(2).apply { view.getLocationInWindow(this) }\r\n\t\t\tPixelCopy.request(\r\n\t\t\t\t/* source = */ window,\r\n\t\t\t\t/* srcRect = */ getRect(x, y),\r\n\t\t\t\t/* dest = */ this,\r\n\t\t\t\t/* listener = */ { copyResult ->\r\n\t\t\t\t\tif (copyResult == PixelCopy.SUCCESS) {\r\n\t\t\t\t\t\tcontinuation.resume(this)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinuation.resumeWithException(\r\n\t\t\t\t\t\t\tRuntimeException(\"Bitmap generation failed\")\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/* listenerThread = */ Handler(Looper.getMainLooper())\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nprivate fun View.getRect(x: Int, y: Int): android.graphics.Rect {\r\n\tval viewWidth = this.width\r\n\tval viewHeight = this.height\r\n\treturn android.graphics.Rect(x, y, viewWidth + x, viewHeight + y)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/BitmapFactory.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/BitmapFactory.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/BitmapFactory.kt	(revision bddbfe91a68fa8935c847b10b9ca7084c7b0d7a4)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/BitmapFactory.kt	(date 1723496450898)
@@ -76,3 +76,13 @@
 	val viewHeight = this.height
 	return android.graphics.Rect(x, y, viewWidth + x, viewHeight + y)
 }
+
+/*fun trackBitmaps(
+	it: View,
+	coroutineScope: CoroutineScope,
+	onCaptured: (ImageBitmap?, Throwable?) -> Unit
+) = bitmapGenerators
+	.mapNotNull { config -> it.drawBitmapFromView(it.context, config) }
+	.onEach { bitmap -> onCaptured(bitmap.asImageBitmap(), null) }
+	.catch { error -> onCaptured(null, error) }
+	.launchIn(coroutineScope)*/
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/components.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/components.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/components.kt
new file mode 100644
--- /dev/null	(date 1723486028796)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/alt/components.kt	(date 1723486028796)
@@ -0,0 +1,38 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard.alt
+
+import android.content.Intent
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Share
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.scale
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.res.painterResource
+import dev.borisochieng.sketchpad.R
+
+@Composable
+fun ShareButton(uriToShare: String?) {
+    val context = LocalContext.current
+    IconButton(onClick = {
+        uriToShare?.let {
+            val sendIntent = Intent().apply {
+                action = Intent.ACTION_SEND
+                putExtra(Intent.EXTRA_TEXT, it)
+                type = "text/html"
+            }
+            context.startActivity(Intent.createChooser(sendIntent, null))
+        }
+    },
+        enabled = uriToShare != null
+    ) {
+        Icon(
+            painter = painterResource(R.drawable.collaboration),
+            contentDescription = "Export sketch",
+            modifier = Modifier.scale(2f)
+        )
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawController.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawController.kt
new file mode 100644
--- /dev/null	(date 1723496450749)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawController.kt	(date 1723496450749)
@@ -0,0 +1,37 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard.data
+
+import android.graphics.Bitmap
+import android.view.View
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.graphics.ImageBitmap
+import androidx.compose.ui.graphics.asImageBitmap
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.flow.MutableSharedFlow
+import kotlinx.coroutines.flow.asSharedFlow
+import kotlinx.coroutines.flow.catch
+import kotlinx.coroutines.flow.launchIn
+import kotlinx.coroutines.flow.mapNotNull
+import kotlinx.coroutines.flow.onEach
+
+class DrawController internal constructor() {
+    private val _bitmapGenerators = MutableSharedFlow<Bitmap.Config>(extraBufferCapacity = 1)
+    private val bitmapGenerators = _bitmapGenerators.asSharedFlow()
+
+    fun saveBitmap(config: Bitmap.Config = Bitmap.Config.ARGB_8888) =
+        _bitmapGenerators.tryEmit(config)
+    fun trackBitmaps(
+        it: View,
+        coroutineScope: CoroutineScope,
+        onCaptured: (ImageBitmap?, Throwable?) -> Unit
+    ) = bitmapGenerators
+        .mapNotNull { config -> it.drawBitmapFromView(it.context, config) }
+        .onEach { bitmap -> onCaptured(bitmap.asImageBitmap(), null) }
+        .catch { error -> onCaptured(null, error) }
+        .launchIn(coroutineScope)
+}
+
+@Composable
+fun rememberDrawController(): dev.borisochieng.sketchpad.ui.screens.drawingboard.data.DrawController {
+    return remember { DrawController() }
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawboxHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawboxHelper.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawboxHelper.kt
new file mode 100644
--- /dev/null	(date 1723496450879)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawboxHelper.kt	(date 1723496450879)
@@ -0,0 +1,89 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard.data
+
+import android.app.Activity
+import android.content.Context
+import android.graphics.Bitmap
+import android.os.Build
+import android.os.Handler
+import android.os.Looper
+import android.view.PixelCopy
+import android.view.View
+import androidx.compose.runtime.snapshots.SnapshotStateList
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.Path
+import androidx.core.view.doOnLayout
+import androidx.core.view.drawToBitmap
+import kotlin.coroutines.resume
+import kotlin.coroutines.resumeWithException
+import kotlin.coroutines.suspendCoroutine
+
+private fun View.getRect(x: Int, y: Int): android.graphics.Rect {
+    val viewWidth = this.width
+    val viewHeight = this.height
+    return android.graphics.Rect(x, y, viewWidth + x, viewHeight + y)
+}
+
+
+//Model
+data class PathWrapper(
+    var points: SnapshotStateList<Offset>,
+    val strokeWidth: Float = 5f,
+    val strokeColor: Color,
+    val alpha: Float = 1f
+)
+
+data class DrawBoxPayLoad(val bgColor: Color, val path: List<PathWrapper>)
+
+
+fun createPath(points: List<Offset>) = Path().apply {
+    if (points.size > 1) {
+        var oldPoint: Offset? = null
+        this.moveTo(points[0].x, points[0].y)
+        for (i in 1 until points.size) {
+            val point: Offset = points[i]
+            oldPoint?.let {
+                val midPoint = calculateMidpoint(it, point)
+                if (i == 1) {
+                    this.lineTo(midPoint.x, midPoint.y)
+                } else {
+                    this.quadraticBezierTo(it.x, it.y, midPoint.x, midPoint.y)
+                }
+            }
+            oldPoint = point
+        }
+        oldPoint?.let { this.lineTo(it.x, oldPoint.y) }
+    }
+}
+
+private fun calculateMidpoint(start: Offset, end: Offset) =
+    Offset((start.x + end.x) / 2, (start.y + end.y) / 2)
+
+
+internal suspend fun View.drawBitmapFromView(context: Context, config: Bitmap.Config): Bitmap =
+    suspendCoroutine { continuation ->
+        doOnLayout { view ->
+            if (Build.VERSION_CODES.O > Build.VERSION.SDK_INT) {
+                continuation.resume(view.drawToBitmap(config))
+                return@doOnLayout
+            }
+
+            val window =
+                (context as? Activity)?.window ?: error("Can't get window from the Context")
+
+            Bitmap.createBitmap(width, height, config).apply {
+                val (x, y) = IntArray(2).apply { view.getLocationInWindow(this) }
+                PixelCopy.request(
+                    window,
+                    getRect(x, y),
+                    this,
+                    { copyResult ->
+                        if (copyResult == PixelCopy.SUCCESS) continuation.resume(this) else continuation.resumeWithException(
+                            RuntimeException("Bitmap generation failed")
+                        )
+                    },
+                    Handler(Looper.getMainLooper())
+                )
+            }
+        }
+    }
\ No newline at end of file
