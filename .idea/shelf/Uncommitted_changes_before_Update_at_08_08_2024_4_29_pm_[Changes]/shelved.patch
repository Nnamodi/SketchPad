Index: app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database\r\n\r\nimport android.graphics.Bitmap\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\nimport java.util.Calendar\r\nimport java.util.Date\r\n\r\n@Entity\r\ndata class Sketch(\r\n\t@PrimaryKey(autoGenerate = true)\r\n\tval id: Int = 0,\r\n\tval name: String = \"\",\r\n\tval dateCreated: Date = Calendar.getInstance().time,\r\n\tval lastModified: Date = Calendar.getInstance().time,\r\n\tval art: Bitmap\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt	(date 1723130410766)
@@ -1,6 +1,7 @@
 package dev.borisochieng.sketchpad.database
 
 import android.graphics.Bitmap
+import androidx.compose.ui.graphics.Color
 import androidx.room.Entity
 import androidx.room.PrimaryKey
 import java.util.Calendar
@@ -10,8 +11,17 @@
 data class Sketch(
 	@PrimaryKey(autoGenerate = true)
 	val id: Int = 0,
-	val name: String = "",
+	val name: String,
 	val dateCreated: Date = Calendar.getInstance().time,
 	val lastModified: Date = Calendar.getInstance().time,
-	val art: Bitmap
+	val art: Bitmap,
+	val backgroundColor: Color,
+	val pathList: List<Path>
+)
+
+data class Path(
+	var points: String, // list of Offsets saved as String
+	val strokeWidth: Float,
+	val strokeColor: Int,
+	val alpha: Float
 )
Index: app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database\r\n\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport androidx.room.TypeConverter\r\nimport java.io.ByteArrayOutputStream\r\nimport java.util.Date\r\n\r\nclass TypeConverter {\r\n\r\n\t@TypeConverter\r\n\tfun fromDate(date: Date?): Long? {\r\n\t\treturn date?.time\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun toDate(millisSinceEpoch: Long?): Date? {\r\n\t\treturn millisSinceEpoch?.let {\r\n\t\t\tDate(it)\r\n\t\t}\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun fromBitmap(bitmap: Bitmap): ByteArray {\r\n\t\tval stream = ByteArrayOutputStream()\r\n\t\tbitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)\r\n\t\treturn stream.toByteArray()\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun toBitmap(byteArray: ByteArray): Bitmap {\r\n\t\tval bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)\r\n\t\treturn bitmap\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt	(date 1723129642419)
@@ -2,16 +2,18 @@
 
 import android.graphics.Bitmap
 import android.graphics.BitmapFactory
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.toArgb
 import androidx.room.TypeConverter
+import com.google.gson.Gson
+import com.google.gson.reflect.TypeToken
 import java.io.ByteArrayOutputStream
 import java.util.Date
 
 class TypeConverter {
 
 	@TypeConverter
-	fun fromDate(date: Date?): Long? {
-		return date?.time
-	}
+	fun fromDate(date: Date?) = date?.time
 
 	@TypeConverter
 	fun toDate(millisSinceEpoch: Long?): Date? {
@@ -33,4 +35,23 @@
 		return bitmap
 	}
 
+	@TypeConverter
+	fun fromColor(color: Color) = color.toArgb()
+
+	@TypeConverter
+	fun toColor(value: Int) = Color(value)
+
+	@TypeConverter
+	fun fromPaths(paths: List<Path>): String {
+		val gson = Gson()
+		return gson.toJson(paths)
+	}
+
+	@TypeConverter
+	fun toPaths(pathJson: String): List<Path> {
+		val gson = Gson()
+		val type = object : TypeToken<List<Path>>() {}.type
+		return gson.fromJson(pathJson, type)
+	}
+
 }
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard\r\n\r\nimport android.graphics.Bitmap\r\nimport android.widget.Toast\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults.cardColors\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.asAndroidBitmap\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\nimport dev.borisochieng.sketchpad.ui.screens.drawingboard.data.convertToOldColor\r\nimport io.ak1.drawbox.DrawBox\r\nimport io.ak1.drawbox.rememberDrawController\r\nimport io.ak1.rangvikalp.RangVikalp\r\nimport io.ak1.rangvikalp.defaultSelectedColor\r\n\r\n@Composable\r\nfun SketchPadScreen(\r\n    sketch: Sketch?,\r\n    save: (Bitmap) -> Unit,\r\n    actions: (SketchPadActions) -> Unit,\r\n    navigate: (Screens) -> Unit\r\n) {\r\n    val undoVisibility = remember { mutableStateOf(false) }\r\n    val redoVisibility = remember { mutableStateOf(false) }\r\n    val colorBarVisibility = remember { mutableStateOf(false) }\r\n    val sizeBarVisibility = remember { mutableStateOf(false) }\r\n    val currentColor = remember { mutableStateOf(defaultSelectedColor) }\r\n    val bg = MaterialTheme.colorScheme.background\r\n    val currentBgColor = remember { mutableStateOf(bg) }\r\n    val currentSize = remember { mutableIntStateOf(10) }\r\n    val colorIsBg = remember { mutableStateOf(false) }\r\n    val drawController = rememberDrawController()\r\n    val context = LocalContext.current\r\n    val openNameSketchDialog = rememberSaveable { mutableStateOf(false) }\r\n    var art: Bitmap? = null\r\n\r\n    Box {\r\n        Column {\r\n            DrawBox(\r\n                drawController = drawController,\r\n                backgroundColor = currentBgColor.value,\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .weight(1f, fill = false),\r\n                bitmapCallback = { imageBitmap, error ->\r\n                    if (imageBitmap == null) {\r\n                        Toast.makeText(context, \"No image to save\", Toast.LENGTH_SHORT).show()\r\n                        return@DrawBox\r\n                    }\r\n                    art = imageBitmap.asAndroidBitmap()\r\n                    if (sketch == null) {\r\n                        openNameSketchDialog.value = true\r\n                    } else {\r\n                        save(art!!)\r\n                        actions(SketchPadActions.UpdateSketch(art!!))\r\n                    }\r\n                }\r\n            ) { undoCount, redoCount ->\r\n                sizeBarVisibility.value = false\r\n                colorBarVisibility.value = false\r\n                undoVisibility.value = undoCount != 0\r\n                redoVisibility.value = redoCount != 0\r\n            }\r\n        }\r\n\r\n        ControlsBar(\r\n            drawController = drawController,\r\n            onDownloadClick = {\r\n                drawController.saveBitmap()\r\n            },\r\n            onColorClick = {\r\n                colorBarVisibility.value = when (colorBarVisibility.value) {\r\n                    false -> true\r\n                    colorIsBg.value -> true\r\n                    else -> false\r\n                }\r\n                colorIsBg.value = false\r\n                sizeBarVisibility.value = false\r\n            },\r\n            onBgColorClick = {\r\n                colorBarVisibility.value = when (colorBarVisibility.value) {\r\n                    false -> true\r\n                    !colorIsBg.value -> true\r\n                    else -> false\r\n                }\r\n                colorIsBg.value = true\r\n                sizeBarVisibility.value = false\r\n            },\r\n            onSizeClick = {\r\n                sizeBarVisibility.value = !sizeBarVisibility.value\r\n                colorBarVisibility.value = false\r\n            },\r\n            undoVisibility = undoVisibility,\r\n            redoVisibility = redoVisibility,\r\n            colorValue = currentColor,\r\n            bgColorValue = currentBgColor,\r\n            sizeValue = currentSize\r\n        )\r\n        Card(colors = cardColors(Color.White))  {\r\n            RangVikalp(\r\n                isVisible = colorBarVisibility.value,\r\n                showShades = true\r\n            ) {\r\n                if (colorIsBg.value) {\r\n                    currentBgColor.value = it\r\n                    drawController.changeBgColor(it)\r\n                } else {\r\n                    currentColor.value = it\r\n                    drawController.changeColor(it)\r\n                }\r\n            }\r\n        }\r\n        CustomSeekbar(\r\n            isVisible = sizeBarVisibility.value,\r\n            progress = currentSize.intValue,\r\n            progressColor = MaterialTheme.colorScheme.primary.convertToOldColor(),\r\n            thumbColor = currentColor.value.convertToOldColor()\r\n        ) {\r\n            currentSize.intValue = it\r\n            drawController.changeStrokeWidth(it.toFloat())\r\n        }\r\n\r\n        if (openNameSketchDialog.value && art != null) {\r\n            NameSketchDialog(\r\n                art = art!!,\r\n                onNamed = {\r\n                    actions(SketchPadActions.SaveSketch(it))\r\n                    navigate(Screens.Back)\r\n                },\r\n                onDismiss = { openNameSketchDialog.value = false }\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt	(date 1723129640555)
@@ -2,25 +2,49 @@
 
 import android.graphics.Bitmap
 import android.widget.Toast
+import androidx.compose.foundation.border
+import androidx.compose.foundation.gestures.rememberTransformableState
+import androidx.compose.foundation.gestures.transformable
 import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.BoxWithConstraints
 import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.rounded.TouchApp
 import androidx.compose.material3.Card
 import androidx.compose.material3.CardDefaults.cardColors
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.IconButtonDefaults
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableFloatStateOf
 import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.asAndroidBitmap
+import androidx.compose.ui.graphics.graphicsLayer
 import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.unit.dp
 import dev.borisochieng.sketchpad.database.Sketch
 import dev.borisochieng.sketchpad.ui.navigation.Screens
+import dev.borisochieng.sketchpad.ui.screens.dialog.NameSketchDialog
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.DrawMode
 import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.convertToOldColor
+import dev.borisochieng.sketchpad.utils.Extensions.toPath
+import dev.borisochieng.sketchpad.utils.Extensions.toPathWrapper
 import io.ak1.drawbox.DrawBox
+import io.ak1.drawbox.DrawBoxPayLoad
 import io.ak1.drawbox.rememberDrawController
 import io.ak1.rangvikalp.RangVikalp
 import io.ak1.rangvikalp.defaultSelectedColor
@@ -43,18 +67,55 @@
     val colorIsBg = remember { mutableStateOf(false) }
     val drawController = rememberDrawController()
     val context = LocalContext.current
+    var drawMode by remember { mutableStateOf(DrawMode.Draw) }
     val openNameSketchDialog = rememberSaveable { mutableStateOf(false) }
     var art: Bitmap? = null
 
+    LaunchedEffect(Unit) {
+        if (sketch == null) return@LaunchedEffect
+        val drawBoxPayload = DrawBoxPayLoad(
+            sketch.backgroundColor,
+            sketch.pathList.map { it.toPathWrapper() }
+        )
+        drawController.importPath(drawBoxPayload)
+    }
+
     Box {
-        Column {
+        BoxWithConstraints(
+            modifier = Modifier.fillMaxSize(),
+            contentAlignment = Alignment.BottomEnd
+        ) {
+            var scale by remember { mutableFloatStateOf(1f) }
+            var offset by remember { mutableStateOf(Offset.Zero) }
+            val state = rememberTransformableState { zoomChange, panChange, _ ->
+                if (drawMode != DrawMode.Touch) return@rememberTransformableState
+                scale = (scale * zoomChange).coerceIn(1f, 5f)
+
+                val extraWidth = (scale - 1) * constraints.maxWidth
+                val extraHeight = (scale - 1) * constraints.maxHeight
+
+                val maxX = extraWidth / 2
+                val maxY = extraHeight / 2
+
+                offset = Offset(
+                    x = (offset.x + scale * panChange.x).coerceIn(-maxX, maxX),
+                    y = (offset.y + scale * panChange.y).coerceIn(-maxY, maxY)
+                )
+            }
+
             DrawBox(
                 drawController = drawController,
-                backgroundColor = currentBgColor.value,
                 modifier = Modifier
                     .fillMaxSize()
-                    .weight(1f, fill = false),
-                bitmapCallback = { imageBitmap, error ->
+                    .graphicsLayer {
+                        scaleX = scale
+                        scaleY = scale
+                        translationX = offset.x
+                        translationY = offset.y
+                    }
+                    .transformable(state),
+                backgroundColor = currentBgColor.value,
+                bitmapCallback = { imageBitmap, _ ->
                     if (imageBitmap == null) {
                         Toast.makeText(context, "No image to save", Toast.LENGTH_SHORT).show()
                         return@DrawBox
@@ -64,7 +125,14 @@
                         openNameSketchDialog.value = true
                     } else {
                         save(art!!)
-                        actions(SketchPadActions.UpdateSketch(art!!))
+                        val payload = drawController.exportPath()
+                        actions(
+                            SketchPadActions.UpdateSketch(
+                                art = art!!,
+                                backgroundColor = payload.bgColor,
+                                paths = payload.path
+                            )
+                        )
                     }
                 }
             ) { undoCount, redoCount ->
@@ -73,6 +141,24 @@
                 undoVisibility.value = undoCount != 0
                 redoVisibility.value = redoCount != 0
             }
+
+            IconButton(
+                onClick = {
+                    drawMode = if (drawMode == DrawMode.Touch) DrawMode.Draw else DrawMode.Touch
+                    val color = if (drawMode == DrawMode.Touch) Color.Transparent else currentColor.value
+                    drawController.changeColor(color)
+                },
+                modifier = Modifier
+                    .padding(20.dp)
+                    .size(54.dp)
+                    .border(1.dp, Color.Gray, CircleShape),
+                colors = IconButtonDefaults.iconButtonColors(
+                    containerColor = if (drawMode == DrawMode.Touch) Color.Black else Color.White,
+                    contentColor = if (drawMode == DrawMode.Touch) Color.White else Color.Gray
+                )
+            ) {
+                Icon(Icons.Rounded.TouchApp, "Touch mode")
+            }
         }
 
         ControlsBar(
@@ -132,11 +218,21 @@
             drawController.changeStrokeWidth(it.toFloat())
         }
 
-        if (openNameSketchDialog.value && art != null) {
+        if (openNameSketchDialog.value) {
             NameSketchDialog(
-                art = art!!,
-                onNamed = {
-                    actions(SketchPadActions.SaveSketch(it))
+                onNamed = { name ->
+                    if (art == null) {
+                        Toast.makeText(context, "No image to save", Toast.LENGTH_SHORT).show()
+                        return@NameSketchDialog
+                    }
+                    val payload = drawController.exportPath()
+                    val newSketch = Sketch(
+                        name = name,
+                        art = art!!,
+                        backgroundColor = payload.bgColor,
+                        pathList = payload.path.map { it.toPath() }
+                    )
+                    actions(SketchPadActions.SaveSketch(newSketch))
                     navigate(Screens.Back)
                 },
                 onDismiss = { openNameSketchDialog.value = false }
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/CustomViews.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard\r\n\r\nimport android.view.Window\r\nimport android.widget.SeekBar\r\nimport androidx.annotation.DrawableRes\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.expandVertically\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.shrinkVertically\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.animation.slideOutVertically\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.RowScope\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.MutableState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport androidx.core.graphics.BlendModeColorFilterCompat\r\nimport androidx.core.graphics.BlendModeCompat\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.theme.AppTheme\r\nimport dev.borisochieng.sketchpad.ui.theme.StatusBarConfig\r\nimport dev.borisochieng.sketchpad.ui.theme.isSystemInDarkThemeCustom\r\nimport dev.borisochieng.sketchpad.ui.theme.lightScheme\r\nimport io.ak1.drawbox.DrawController\r\n\r\n\r\n@Composable\r\nfun ControlsBar(\r\n    drawController: DrawController,\r\n    onDownloadClick: () -> Unit,\r\n    onColorClick: () -> Unit,\r\n    onBgColorClick: () -> Unit,\r\n    onSizeClick: () -> Unit,\r\n    undoVisibility: MutableState<Boolean>,\r\n    redoVisibility: MutableState<Boolean>,\r\n    colorValue: MutableState<Color>,\r\n    bgColorValue: MutableState<Color>,\r\n    sizeValue: MutableState<Int>\r\n) {\r\n    Row(modifier = Modifier.padding(12.dp), horizontalArrangement = Arrangement.SpaceAround) {\r\n        MenuItems(\r\n            R.drawable.ic_download,\r\n            \"download\",\r\n            if (undoVisibility.value) lightScheme.onBackground else lightScheme.primary\r\n        ) {\r\n            if (undoVisibility.value) onDownloadClick()\r\n        }\r\n        MenuItems(\r\n            R.drawable.ic_undo,\r\n            \"undo\",\r\n            if (undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary\r\n        ) {\r\n            if (undoVisibility.value) drawController.unDo()\r\n        }\r\n        MenuItems(\r\n            R.drawable.ic_redo,\r\n            \"redo\",\r\n            if (redoVisibility.value) lightScheme.primary else lightScheme.inversePrimary\r\n        ) {\r\n            if (redoVisibility.value) drawController.reDo()\r\n        }\r\n        MenuItems(\r\n            R.drawable.ic_refresh,\r\n            \"reset\",\r\n            if (redoVisibility.value || undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary\r\n        ) {\r\n            drawController.reset()\r\n        }\r\n        MenuItems(R.drawable.icons8_color_wheel_24, \"background color\", bgColorValue.value, bgColorValue.value == lightScheme.background ) {\r\n            onBgColorClick()\r\n        }\r\n        MenuItems(R.drawable.palette_2, \"stroke color\", colorValue.value) {\r\n            onColorClick()\r\n        }\r\n        MenuItems(R.drawable.pen, \"stroke size\", lightScheme.primary) {\r\n            onSizeClick()\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun RowScope.MenuItems(\r\n    @DrawableRes resId: Int,\r\n    desc: String,\r\n    colorTint: Color,\r\n    border: Boolean = false,\r\n    onClick: () -> Unit\r\n) {\r\n    val modifier = Modifier.size(24.dp)\r\n    IconButton(\r\n        onClick = onClick, modifier = Modifier.weight(1f, true)\r\n    ) {\r\n        Icon(\r\n            painterResource(id = resId),\r\n            contentDescription = desc,\r\n            tint = colorTint,\r\n            modifier = if (border) modifier.border(\r\n                0.5.dp,\r\n                Color.Red,\r\n                shape = CircleShape\r\n            ) else modifier\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun CustomSeekbar(\r\n    isVisible: Boolean,\r\n    max: Int = 200,\r\n    progress: Int = max,\r\n    progressColor: Int,\r\n    thumbColor: Int,\r\n    onProgressChanged: (Int) -> Unit\r\n) {\r\n    val density = LocalDensity.current\r\n    AnimatedVisibility(\r\n        visible = isVisible,\r\n        enter = slideInVertically {\r\n            // Slide in from 40 dp from the top.\r\n            with(density) { -40.dp.roundToPx() }\r\n        } + expandVertically(\r\n            // Expand from the top.\r\n            expandFrom = Alignment.Top\r\n        ) + fadeIn(\r\n            // Fade in with the initial alpha of 0.3f.\r\n            initialAlpha = 0.3f\r\n        ),\r\n        exit = slideOutVertically() + shrinkVertically() + fadeOut()\r\n    ) {\r\n        val context = LocalContext.current\r\n        Column(\r\n            modifier = Modifier\r\n                .height(100.dp)\r\n                .fillMaxWidth(),\r\n            verticalArrangement = Arrangement.SpaceEvenly\r\n        ) {\r\n            Text(text = \"Stroke Width\", modifier = Modifier.padding(12.dp, 0.dp, 0.dp, 0.dp))\r\n            AndroidView(\r\n                { SeekBar(context) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n            ) {\r\n                it.progressDrawable.colorFilter =\r\n                    BlendModeColorFilterCompat.createBlendModeColorFilterCompat(\r\n                        progressColor,\r\n                        BlendModeCompat.SRC_ATOP\r\n                    )\r\n                it.thumb.colorFilter =\r\n                    BlendModeColorFilterCompat.createBlendModeColorFilterCompat(\r\n                        thumbColor,\r\n                        BlendModeCompat.SRC_ATOP\r\n                    )\r\n                it.max = max\r\n                it.progress = progress\r\n                it.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {\r\n                    override fun onProgressChanged(p0: SeekBar?, p1: Int, p2: Boolean) {\r\n\r\n                    }\r\n\r\n                    override fun onStartTrackingTouch(p0: SeekBar?) {}\r\n                    override fun onStopTrackingTouch(p0: SeekBar?) {\r\n                        onProgressChanged(p0?.progress ?: it.progress)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Root(window: Window, content: @Composable () -> Unit) {\r\n    val isDark = isSystemInDarkThemeCustom()\r\n    AppTheme(isDark) {\r\n        window.StatusBarConfig(isDark)\r\n        Surface(color = lightScheme.surface) {\r\n            content.invoke()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/CustomViews.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/CustomViews.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/CustomViews.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/CustomViews.kt	(date 1723113097911)
@@ -43,7 +43,6 @@
 import dev.borisochieng.sketchpad.ui.theme.lightScheme
 import io.ak1.drawbox.DrawController
 
-
 @Composable
 fun ControlsBar(
     drawController: DrawController,
@@ -59,40 +58,53 @@
 ) {
     Row(modifier = Modifier.padding(12.dp), horizontalArrangement = Arrangement.SpaceAround) {
         MenuItems(
-            R.drawable.ic_download,
-            "download",
-            if (undoVisibility.value) lightScheme.onBackground else lightScheme.primary
+            resId = R.drawable.ic_download,
+            desc = "download",
+            colorTint = if (undoVisibility.value) lightScheme.onBackground else lightScheme.primary
         ) {
             if (undoVisibility.value) onDownloadClick()
         }
         MenuItems(
-            R.drawable.ic_undo,
-            "undo",
-            if (undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
+            resId = R.drawable.ic_undo,
+            desc = "undo",
+            colorTint = if (undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
         ) {
             if (undoVisibility.value) drawController.unDo()
         }
         MenuItems(
-            R.drawable.ic_redo,
-            "redo",
-            if (redoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
+            resId = R.drawable.ic_redo,
+            desc = "redo",
+            colorTint = if (redoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
         ) {
             if (redoVisibility.value) drawController.reDo()
         }
         MenuItems(
-            R.drawable.ic_refresh,
-            "reset",
-            if (redoVisibility.value || undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
+            resId = R.drawable.ic_refresh,
+            desc = "reset",
+            colorTint = if (redoVisibility.value || undoVisibility.value) lightScheme.primary else lightScheme.inversePrimary
         ) {
             drawController.reset()
         }
-        MenuItems(R.drawable.icons8_color_wheel_24, "background color", bgColorValue.value, bgColorValue.value == lightScheme.background ) {
+        MenuItems(
+            resId = R.drawable.icons8_color_wheel_24,
+            desc = "background color",
+            colorTint = bgColorValue.value,
+            border = bgColorValue.value == lightScheme.background
+        ) {
             onBgColorClick()
         }
-        MenuItems(R.drawable.palette_2, "stroke color", colorValue.value) {
+        MenuItems(
+            resId = R.drawable.palette_2,
+            desc = "stroke color",
+            colorTint = colorValue.value
+        ) {
             onColorClick()
         }
-        MenuItems(R.drawable.pen, "stroke size", lightScheme.primary) {
+        MenuItems(
+            resId = R.drawable.pen,
+            desc = "stroke size",
+            colorTint = lightScheme.primary
+        ) {
             onSizeClick()
         }
     }
Index: .kotlin/errors/errors-1723119868540.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.kotlin/errors/errors-1723119868540.log b/.kotlin/errors/errors-1723119868540.log
new file mode 100644
--- /dev/null	(date 1723120413153)
+++ b/.kotlin/errors/errors-1723119868540.log	(date 1723120413153)
@@ -0,0 +1,3 @@
+kotlin version: 2.0.0
+error message: The daemon has terminated unexpectedly on startup attempt #1 with error code: 0.     The daemon process produced no output
+
Index: .kotlin/errors/errors-1723128311813.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.kotlin/errors/errors-1723128311813.log b/.kotlin/errors/errors-1723128311813.log
new file mode 100644
--- /dev/null	(date 1723130430318)
+++ b/.kotlin/errors/errors-1723128311813.log	(date 1723130430318)
@@ -0,0 +1,46 @@
+kotlin version: 2.0.0
+error message: Failed connecting to the daemon in 3 retries
+
+error message: Daemon compilation failed: Could not connect to Kotlin compile daemon
+java.lang.RuntimeException: Could not connect to Kotlin compile daemon
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:214)
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)
+	at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)
+	at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)
+	at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)
+	at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)
+	at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
+	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
+	at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)
+	at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)
+	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:187)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:120)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:162)
+	at org.gradle.internal.Factories$1.create(Factories.java:31)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:133)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:157)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:126)
+	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
+	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
+	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
+	at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
+	at java.base/java.lang.Thread.run(Thread.java:840)
+
+
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawMode.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawMode.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawMode.kt
new file mode 100644
--- /dev/null	(date 1723109892206)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/data/DrawMode.kt	(date 1723109892206)
@@ -0,0 +1,5 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard.data
+
+enum class DrawMode {
+	Draw, Erase, Touch
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.home\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.lazy.grid.GridCells\r\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.rounded.Add\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.unit.dp\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport dev.borisochieng.sketchpad.ui.components.HomeTopBar\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\n\r\n@Composable\r\nfun HomeScreen(\r\n\tsavedSketches: List<Sketch>,\r\n\tnavigate: (Screens) -> Unit\r\n) {\r\n\tScaffold(\r\n\t\ttopBar = { HomeTopBar() }\r\n\t) { paddingValues ->\r\n\t\tColumn(\r\n\t\t\tmodifier = Modifier\r\n\t\t\t\t.fillMaxSize()\r\n\t\t\t\t.padding(paddingValues),\r\n\t\t\thorizontalAlignment = Alignment.CenterHorizontally\r\n\t\t) {\r\n\t\t\tOutlinedButton(\r\n\t\t\t\tonClick = { navigate(Screens.SketchPad(null)) },\r\n\t\t\t\tmodifier = Modifier\r\n\t\t\t\t\t.fillMaxWidth()\r\n\t\t\t\t\t.padding(20.dp, 16.dp)\r\n\t\t\t) {\r\n\t\t\t\tIcon(Icons.Rounded.Add, null, Modifier.padding(vertical = 14.dp))\r\n\t\t\t\tText(\"Create New Sketch\", Modifier.padding(start = 10.dp))\r\n\t\t\t}\r\n\t\t\tLazyVerticalGrid(\r\n\t\t\t\tcolumns = GridCells.Adaptive(150.dp),\r\n\t\t\t\tmodifier = Modifier.padding(start = 10.dp),\r\n\t\t\t\tcontentPadding = PaddingValues(bottom = 40.dp)\r\n\t\t\t) {\r\n\t\t\t\titems(savedSketches.size) { index ->\r\n\t\t\t\t\tval sketch = savedSketches[index]\r\n\t\t\t\t\tSketchPoster(\r\n\t\t\t\t\t\tsketch = sketch,\r\n\t\t\t\t\t\tonClick = { navigate(Screens.SketchPad(it)) }\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt	(date 1723114886548)
@@ -6,10 +6,14 @@
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.lazy.grid.GridCells
 import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.rounded.Add
+import androidx.compose.material.icons.rounded.History
 import androidx.compose.material3.Icon
 import androidx.compose.material3.OutlinedButton
 import androidx.compose.material3.Scaffold
@@ -17,7 +21,12 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.alpha
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
 import dev.borisochieng.sketchpad.database.Sketch
 import dev.borisochieng.sketchpad.ui.components.HomeTopBar
 import dev.borisochieng.sketchpad.ui.navigation.Screens
@@ -58,6 +67,38 @@
 					)
 				}
 			}
+
+			if (savedSketches.isEmpty()) { EmptyScreen() }
 		}
 	}
 }
+
+@Composable
+private fun EmptyScreen() {
+	val displayText = "No drawings saved"
+
+	Column(
+		modifier = Modifier
+			.fillMaxSize()
+			.verticalScroll(rememberScrollState())
+			.padding(30.dp)
+			.alpha(0.7f),
+		verticalArrangement = Arrangement.Center,
+		horizontalAlignment = Alignment.CenterHorizontally
+	) {
+		Icon(
+			imageVector = Icons.Rounded.History,
+			contentDescription = displayText,
+			modifier = Modifier
+				.padding(bottom = 20.dp)
+				.size(100.dp)
+		)
+		Text(
+			text = displayText,
+			fontSize = 24.sp,
+			fontStyle = FontStyle.Italic,
+			fontWeight = FontWeight.Medium,
+			textAlign = TextAlign.Center
+		)
+	}
+}
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard\r\n\r\nimport android.graphics.Bitmap\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport dev.borisochieng.sketchpad.database.repository.SketchRepository\r\nimport kotlinx.coroutines.launch\r\nimport org.koin.core.component.KoinComponent\r\nimport org.koin.core.component.inject\r\n\r\nclass SketchPadViewModel : ViewModel(), KoinComponent {\r\n\r\n\tprivate val sketchRepository by inject<SketchRepository>()\r\n\r\n\tvar sketch by mutableStateOf<Sketch?>(null); private set\r\n\r\n\tfun fetchSketch(sketchId: Int?) {\r\n\t\tsketch = null\r\n\t\tif (sketchId == null) return\r\n\t\tviewModelScope.launch {\r\n\t\t\tsketchRepository.getSketch(sketchId).collect {\r\n\t\t\t\tsketch = it\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfun actions(action: SketchPadActions) {\r\n\t\twhen (action) {\r\n\t\t\tis SketchPadActions.SaveSketch -> saveSketch(action.sketch)\r\n\t\t\tis SketchPadActions.UpdateSketch -> updateSketch(action.art)\r\n\t\t\tis SketchPadActions.DeleteSketch -> deleteSketch(action.sketch)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate fun saveSketch(sketch: Sketch) {\r\n\t\tviewModelScope.launch {\r\n\t\t\tsketchRepository.saveSketch(sketch)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate fun updateSketch(art: Bitmap) {\r\n\t\tviewModelScope.launch {\r\n\t\t\tif (sketch == null) return@launch\r\n\t\t\tval updatedSketch = Sketch(\r\n\t\t\t\tid = sketch!!.id,\r\n\t\t\t\tname = sketch!!.name,\r\n\t\t\t\tdateCreated = sketch!!.dateCreated,\r\n\t\t\t\tart = art\r\n\t\t\t)\r\n\t\t\tsketchRepository.updateSketch(updatedSketch)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate fun deleteSketch(sketchToDelete: Sketch) {\r\n\t\tviewModelScope.launch {\r\n\t\t\tsketchRepository.deleteSketch(sketchToDelete)\r\n\t\t}\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt	(date 1723130910889)
@@ -4,10 +4,13 @@
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.setValue
+import androidx.compose.ui.graphics.Color
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import dev.borisochieng.sketchpad.database.Sketch
 import dev.borisochieng.sketchpad.database.repository.SketchRepository
+import dev.borisochieng.sketchpad.utils.Extensions.toPath
+import io.ak1.drawbox.PathWrapper
 import kotlinx.coroutines.launch
 import org.koin.core.component.KoinComponent
 import org.koin.core.component.inject
@@ -31,7 +34,7 @@
 	fun actions(action: SketchPadActions) {
 		when (action) {
 			is SketchPadActions.SaveSketch -> saveSketch(action.sketch)
-			is SketchPadActions.UpdateSketch -> updateSketch(action.art)
+			is SketchPadActions.UpdateSketch -> updateSketch(action.art, action.backgroundColor, action.paths)
 			is SketchPadActions.DeleteSketch -> deleteSketch(action.sketch)
 		}
 	}
@@ -42,14 +45,20 @@
 		}
 	}
 
-	private fun updateSketch(art: Bitmap) {
+	private fun updateSketch(
+		art: Bitmap,
+		backgroundColor: Color,
+		paths: List<PathWrapper>
+	) {
 		viewModelScope.launch {
 			if (sketch == null) return@launch
 			val updatedSketch = Sketch(
 				id = sketch!!.id,
 				name = sketch!!.name,
 				dateCreated = sketch!!.dateCreated,
-				art = art
+				art = art,
+				backgroundColor = backgroundColor,
+				pathList = paths.map { it.toPath() }
 			)
 			sketchRepository.updateSketch(updatedSketch)
 		}
Index: app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.utils\r\n\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Date\r\nimport java.util.Locale\r\n\r\nobject Extensions {\r\n\r\n\tfun Date.formatDate(): String {\r\n\t\tval style = SimpleDateFormat(\"dd/mm/yyyy\", Locale.getDefault())\r\n\t\treturn style.format(this)\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt b/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt	(date 1723129641576)
@@ -1,5 +1,13 @@
 package dev.borisochieng.sketchpad.utils
 
+import androidx.compose.runtime.toMutableStateList
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.toArgb
+import com.google.gson.Gson
+import com.google.gson.reflect.TypeToken
+import dev.borisochieng.sketchpad.database.Path
+import io.ak1.drawbox.PathWrapper
 import java.text.SimpleDateFormat
 import java.util.Date
 import java.util.Locale
@@ -11,4 +19,29 @@
 		return style.format(this)
 	}
 
+	fun PathWrapper.toPath() = Path(
+		points = points.toList().toJsonString(),
+		strokeWidth = strokeWidth,
+		strokeColor = strokeColor.toArgb(),
+		alpha = alpha
+	)
+
+	fun Path.toPathWrapper() = PathWrapper(
+		points = points.toPoints().toMutableStateList(),
+		strokeWidth = strokeWidth,
+		strokeColor = Color(strokeColor),
+		alpha = alpha
+	)
+
+	private fun List<Offset>.toJsonString(): String {
+		val gson = Gson()
+		return gson.toJson(this)
+	}
+
+	private fun String.toPoints(): List<Offset> {
+		val gson = Gson()
+		val type = object : TypeToken<List<Offset>>() {}.type
+		return gson.fromJson(this, type)
+	}
+
 }
\ No newline at end of file
Index: .kotlin/errors/errors-1723128311809.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.kotlin/errors/errors-1723128311809.log b/.kotlin/errors/errors-1723128311809.log
new file mode 100644
--- /dev/null	(date 1723130285771)
+++ b/.kotlin/errors/errors-1723128311809.log	(date 1723130285771)
@@ -0,0 +1,46 @@
+kotlin version: 2.0.0
+error message: Failed connecting to the daemon in 3 retries
+
+error message: Daemon compilation failed: Could not connect to Kotlin compile daemon
+java.lang.RuntimeException: Could not connect to Kotlin compile daemon
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemon(GradleKotlinCompilerWork.kt:214)
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.compileWithDaemonOrFallbackImpl(GradleKotlinCompilerWork.kt:159)
+	at org.jetbrains.kotlin.compilerRunner.GradleKotlinCompilerWork.run(GradleKotlinCompilerWork.kt:111)
+	at org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction.execute(GradleCompilerRunnerWithWorkers.kt:76)
+	at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:63)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:66)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:62)
+	at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:100)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:62)
+	at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)
+	at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
+	at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
+	at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
+	at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)
+	at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:59)
+	at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$0(DefaultWorkerExecutor.java:174)
+	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:187)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.access$700(DefaultConditionalExecutionQueue.java:120)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner$1.run(DefaultConditionalExecutionQueue.java:162)
+	at org.gradle.internal.Factories$1.create(Factories.java:31)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:264)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:128)
+	at org.gradle.internal.work.DefaultWorkerLeaseService.runAsWorkerThread(DefaultWorkerLeaseService.java:133)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:157)
+	at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:126)
+	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
+	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
+	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
+	at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
+	at java.base/java.lang.Thread.run(Thread.java:840)
+
+
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard\r\n\r\nimport android.graphics.Bitmap\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\n\r\nsealed class SketchPadActions {\r\n\r\n\tdata class SaveSketch(val sketch: Sketch) : SketchPadActions()\r\n\r\n\tdata class UpdateSketch(val art: Bitmap) : SketchPadActions()\r\n\r\n\tdata class DeleteSketch(val sketch: Sketch) : SketchPadActions()\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt	(date 1723117364175)
@@ -1,13 +1,19 @@
 package dev.borisochieng.sketchpad.ui.screens.drawingboard
 
 import android.graphics.Bitmap
+import androidx.compose.ui.graphics.Color
 import dev.borisochieng.sketchpad.database.Sketch
+import io.ak1.drawbox.PathWrapper
 
 sealed class SketchPadActions {
 
 	data class SaveSketch(val sketch: Sketch) : SketchPadActions()
 
-	data class UpdateSketch(val art: Bitmap) : SketchPadActions()
+	data class UpdateSketch(
+		val art: Bitmap,
+		val backgroundColor: Color,
+		val paths: List<PathWrapper>
+	) : SketchPadActions()
 
 	data class DeleteSketch(val sketch: Sketch) : SketchPadActions()
 
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/dialog/NameSketchDialog.kt
rename from app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt
rename to app/src/main/java/dev/borisochieng/sketchpad/ui/screens/dialog/NameSketchDialog.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/dialog/NameSketchDialog.kt	(date 1723124718844)
@@ -1,6 +1,5 @@
-package dev.borisochieng.sketchpad.ui.screens.drawingboard
+package dev.borisochieng.sketchpad.ui.screens.dialog
 
-import android.graphics.Bitmap
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.material3.AlertDialog
 import androidx.compose.material3.Button
@@ -13,12 +12,10 @@
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Modifier
-import dev.borisochieng.sketchpad.database.Sketch
 
 @Composable
 fun NameSketchDialog(
-	art: Bitmap,
-	onNamed: (Sketch) -> Unit,
+	onNamed: (String) -> Unit,
 	onDismiss: () -> Unit
 ) {
 	var name by rememberSaveable { mutableStateOf("") }
@@ -43,13 +40,7 @@
 		},
 		confirmButton = {
 			Button(
-				onClick = {
-					val sketch = Sketch(
-						name = name,
-						art = art
-					)
-					onNamed(sketch)
-				},
+				onClick = { onNamed(name) },
 				modifier = Modifier.fillMaxWidth(0.5f),
 				enabled = name.isNotEmpty()
 			) {
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.components\r\n\r\nimport android.annotation.SuppressLint\r\nimport androidx.annotation.StringRes\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.ExitTransition\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Home\r\nimport androidx.compose.material.icons.outlined.Person\r\nimport androidx.compose.material.icons.outlined.Settings\r\nimport androidx.compose.material.icons.rounded.Home\r\nimport androidx.compose.material.icons.rounded.Person\r\nimport androidx.compose.material.icons.rounded.Settings\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.MaterialTheme.colorScheme\r\nimport androidx.compose.material3.NavigationBarDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.NavGraph.Companion.findStartDestination\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.navigation.AppRoute\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun HomeTopBar() {\r\n\tTopAppBar(\r\n\t\ttitle = {},\r\n\t\tnavigationIcon = {\r\n\t\t\tImage(\r\n\t\t\t\tpainter = painterResource(R.drawable.logo),\r\n\t\t\t\tcontentDescription = stringResource(R.string.app_name)\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n}\r\n\r\n@Composable\r\nfun NavBar(\r\n\tnavController: NavController,\r\n\tmodifier: Modifier = Modifier\r\n) {\r\n\tval navBackStackEntry = navController.currentBackStackEntryAsState()\r\n\tval currentRoute = navBackStackEntry.value?.destination?.route\r\n\tval homeScreens = setOf(AppRoute.HomeScreen, AppRoute.SettingsScreen, AppRoute.ProfileScreen).map { it.route }\r\n\tval inHomeScreens = currentRoute in homeScreens\r\n\tAnimatedVisibility(\r\n\t\tvisible = inHomeScreens,\r\n\t\tenter = slideInVertically(tween(durationMillis = 350, delayMillis = 1000)) { it },\r\n\t\texit = ExitTransition.None\r\n\t) {\r\n\t\tNavBarVisuals(navController, modifier)\r\n\t}\r\n}\r\n\r\n@SuppressLint(\"RestrictedApi\")\r\n@Composable\r\nprivate fun NavBarVisuals(\r\n\tnavController: NavController,\r\n\tmodifier: Modifier = Modifier\r\n) {\r\n\tval navBackStackEntry = navController.currentBackStackEntryAsState()\r\n\tval currentRoute = navBackStackEntry.value?.destination?.route\r\n\tval backStack = navController.currentBackStack.collectAsState().value.map { it.destination.route }\r\n\r\n\tRow(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.padding(16.dp)\r\n\t\t\t.clip(MaterialTheme.shapes.large)\r\n\t\t\t.background(NavigationBarDefaults.containerColor),\r\n\t\thorizontalArrangement = Arrangement.Center,\r\n\t\tverticalAlignment = Alignment.CenterVertically\r\n\t) {\r\n\t\tNavBarItems.entries.forEach { item ->\r\n\t\t\tval inBackStack = item.route == currentRoute || item.route in backStack\r\n\t\t\tval selected = when (item) {\r\n\t\t\t\tNavBarItems.Home -> {\r\n\t\t\t\t\tval noHomeScreenInStack = NavBarItems.entries.filter { it != NavBarItems.Home }\r\n\t\t\t\t\t\t.all { it.route !in backStack }\r\n\t\t\t\t\tinBackStack && noHomeScreenInStack\r\n\t\t\t\t}\r\n\t\t\t\telse -> inBackStack\r\n\t\t\t}\r\n\r\n\t\t\tNavigationBarItem(\r\n\t\t\t\tselected = selected,\r\n\t\t\t\tselectedIcon = item.selectedIcon,\r\n\t\t\t\tunselectedIcon = item.unselectedIcon,\r\n\t\t\t\tlabel = stringResource(item.title),\r\n\t\t\t\tmodifier = Modifier.weight(1f),\r\n\t\t\t\tonClick = {\r\n\t\t\t\t\tnavController.navigate(item.route) {\r\n\t\t\t\t\t\tpopUpTo(navController.graph.findStartDestination().id) {\r\n\t\t\t\t\t\t\tsaveState = item.route != currentRoute\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlaunchSingleTop = true\r\n\t\t\t\t\t\trestoreState = true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@Composable\r\nprivate fun NavigationBarItem(\r\n\tselected: Boolean,\r\n\tselectedIcon: ImageVector,\r\n\tunselectedIcon: ImageVector,\r\n\tlabel: String,\r\n\tmodifier: Modifier = Modifier,\r\n\tonClick: () -> Unit\r\n) {\r\n\tval color = if (selected) colorScheme.primary else colorScheme.onBackground\r\n\r\n\tColumn(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.clickable { onClick() }\r\n\t\t\t.padding(vertical = 6.dp),\r\n\t\thorizontalAlignment = Alignment.CenterHorizontally\r\n\t) {\r\n\t\tIcon(\r\n\t\t\timageVector = if (selected) selectedIcon else unselectedIcon,\r\n\t\t\tcontentDescription = label,\r\n\t\t\tmodifier = Modifier.padding(start = 12.5.dp, end = 12.5.dp, bottom = 4.dp),\r\n\t\t\ttint = color\r\n\t\t)\r\n\t\tText(text = label, color = color)\r\n\t}\r\n}\r\n\r\nprivate enum class NavBarItems(\r\n\t@StringRes val title: Int,\r\n\tval selectedIcon: ImageVector,\r\n\tval unselectedIcon: ImageVector,\r\n\tval route: String\r\n) {\r\n\tHome(\r\n\t\ttitle = R.string.home,\r\n\t\tselectedIcon = Icons.Rounded.Home,\r\n\t\tunselectedIcon = Icons.Outlined.Home,\r\n\t\troute = AppRoute.HomeScreen.route\r\n\t),\r\n\tProfile(\r\n\t\ttitle = R.string.profile,\r\n\t\tselectedIcon = Icons.Rounded.Person,\r\n\t\tunselectedIcon = Icons.Outlined.Person,\r\n\t\troute = AppRoute.ProfileScreen.route\r\n\t),\r\n\tSettings(\r\n\t\ttitle = R.string.settings,\r\n\t\tselectedIcon = Icons.Rounded.Settings,\r\n\t\tunselectedIcon = Icons.Outlined.Settings,\r\n\t\troute = AppRoute.SettingsScreen.route\r\n\t)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt	(revision 98fbc0b75c723cd646346fd163ac4b9bd8919e46)
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt	(date 1723108303583)
@@ -10,6 +10,7 @@
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.fillMaxWidth
@@ -47,12 +48,16 @@
 @Composable
 fun HomeTopBar() {
 	TopAppBar(
-		title = {},
-		navigationIcon = {
-			Image(
-				painter = painterResource(R.drawable.logo),
-				contentDescription = stringResource(R.string.app_name)
-			)
+		title = {
+			Box(
+				modifier = Modifier.fillMaxWidth(),
+				contentAlignment = Alignment.Center
+			) {
+				Image(
+					painter = painterResource(R.drawable.logo),
+					contentDescription = stringResource(R.string.app_name)
+				)
+			}
 		}
 	)
 }
