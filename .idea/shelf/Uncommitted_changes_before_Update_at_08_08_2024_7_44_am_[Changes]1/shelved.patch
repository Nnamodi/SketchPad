Index: app/src/main/java/dev/borisochieng/sketchpad/ui/navigation/AppRoute.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.navigation\r\n\r\nimport android.graphics.Bitmap\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport dev.borisochieng.sketchpad.auth.presentation.screens.OnBoardingScreen\r\nimport dev.borisochieng.sketchpad.auth.presentation.screens.SignUpScreen\r\nimport dev.borisochieng.sketchpad.toby.SketchPadScreen\r\nimport dev.borisochieng.sketchpad.ui.screens.profile.ProfileScreen\r\nimport dev.borisochieng.sketchpad.ui.screens.settings.SettingsScreen\r\nimport dev.borisochieng.sketchpad.utils.AnimationDirection\r\nimport dev.borisochieng.sketchpad.utils.animatedComposable\r\n\r\n@Composable\r\nfun AppRoute(\r\n\tnavActions: NavActions,\r\n\tnavController: NavHostController,\r\n\tpaddingValues: PaddingValues,\r\n\tsaveImage: (Bitmap) -> Unit,\r\n) {\r\n\tNavHost(\r\n\t\tnavController = navController,\r\n\t\tstartDestination = AppRoute.OnBoardingScreen.route,\r\n\t\tmodifier = Modifier.padding(paddingValues)\r\n\t) {\r\n\t\tcomposable(AppRoute.HomeScreen.route) {\r\n\t\t\tSketchPadScreen(save = saveImage,navigate = navActions::navigate )\r\n\t\t}\r\n\t\tanimatedComposable(\r\n\t\t\troute = AppRoute.SketchPad.route,\r\n\t\t\tanimationDirection = AnimationDirection.UpDown\r\n\t\t) { backStackEntry ->\r\n\t\t\tval sketchId = backStackEntry.arguments?.getInt(\"sketchId\")\r\n\t\t\tLaunchedEffect(true) {\r\n\t\t\t\tif (sketchId == null) return@LaunchedEffect\r\n\t\t\t\t// fetch sketch from database using id\r\n\t\t\t}\r\n\r\n\t\t\tSketchPadScreen(save = saveImage,navigate = navActions::navigate )\r\n\r\n\t\t}\r\n\t\tcomposable(AppRoute.SettingsScreen.route) {\r\n\t\t\tSettingsScreen(navigate = navActions::navigate)\r\n\t\t}\r\n\t\tcomposable(AppRoute.ProfileScreen.route) {\r\n\t\t\tProfileScreen(navigate = navActions::navigate)\r\n\t\t}\r\n\t\tanimatedComposable(AppRoute.OnBoardingScreen.route) {\r\n\t\t\tOnBoardingScreen(navigate = navActions::navigate)\r\n\t\t}\r\n\t\tanimatedComposable(AppRoute.SignUpScreen.route) {\r\n\t\t\tSignUpScreen(navigate = navActions:: navigate)\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/navigation/AppRoute.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/navigation/AppRoute.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/navigation/AppRoute.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/navigation/AppRoute.kt	
@@ -11,11 +11,15 @@
 import androidx.navigation.compose.composable
 import dev.borisochieng.sketchpad.auth.presentation.screens.OnBoardingScreen
 import dev.borisochieng.sketchpad.auth.presentation.screens.SignUpScreen
-import dev.borisochieng.sketchpad.toby.SketchPadScreen
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.SketchPadScreen
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.SketchPadViewModel
+import dev.borisochieng.sketchpad.ui.screens.home.HomeScreen
+import dev.borisochieng.sketchpad.ui.screens.home.HomeViewModel
 import dev.borisochieng.sketchpad.ui.screens.profile.ProfileScreen
 import dev.borisochieng.sketchpad.ui.screens.settings.SettingsScreen
 import dev.borisochieng.sketchpad.utils.AnimationDirection
 import dev.borisochieng.sketchpad.utils.animatedComposable
+import org.koin.androidx.compose.koinViewModel
 
 @Composable
 fun AppRoute(
@@ -23,6 +27,8 @@
 	navController: NavHostController,
 	paddingValues: PaddingValues,
 	saveImage: (Bitmap) -> Unit,
+	homeViewModel: HomeViewModel = koinViewModel(),
+	sketchPadViewModel: SketchPadViewModel = koinViewModel()
 ) {
 	NavHost(
 		navController = navController,
@@ -30,7 +36,10 @@
 		modifier = Modifier.padding(paddingValues)
 	) {
 		composable(AppRoute.HomeScreen.route) {
-			SketchPadScreen(save = saveImage,navigate = navActions::navigate )
+			HomeScreen(
+				savedSketches = homeViewModel.savedSketches,
+				navigate = navActions::navigate
+			)
 		}
 		animatedComposable(
 			route = AppRoute.SketchPad.route,
@@ -38,11 +47,15 @@
 		) { backStackEntry ->
 			val sketchId = backStackEntry.arguments?.getInt("sketchId")
 			LaunchedEffect(true) {
-				if (sketchId == null) return@LaunchedEffect
-				// fetch sketch from database using id
+				sketchPadViewModel.fetchSketch(sketchId)
 			}
 
-			SketchPadScreen(save = saveImage,navigate = navActions::navigate )
+			SketchPadScreen(
+				sketch = sketchPadViewModel.sketch,
+				save = saveImage,
+				actions = sketchPadViewModel::actions,
+				navigate = navActions::navigate
+			)
 
 		}
 		composable(AppRoute.SettingsScreen.route) {
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.drawingboard\r\n\r\nimport androidx.compose.runtime.Composable\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\n\r\n@Composable\r\nfun SketchPad(navigate: (Screens) -> Unit) {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPad.kt	
@@ -1,7 +1,146 @@
 package dev.borisochieng.sketchpad.ui.screens.drawingboard
 
+import android.graphics.Bitmap
+import android.widget.Toast
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.material3.Card
+import androidx.compose.material3.CardDefaults.cardColors
+import androidx.compose.material3.MaterialTheme
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.asAndroidBitmap
+import androidx.compose.ui.platform.LocalContext
+import dev.borisochieng.sketchpad.database.Sketch
 import dev.borisochieng.sketchpad.ui.navigation.Screens
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.convertToOldColor
+import io.ak1.drawbox.DrawBox
+import io.ak1.drawbox.rememberDrawController
+import io.ak1.rangvikalp.RangVikalp
+import io.ak1.rangvikalp.defaultSelectedColor
 
 @Composable
-fun SketchPad(navigate: (Screens) -> Unit) {}
\ No newline at end of file
+fun SketchPadScreen(
+    sketch: Sketch?,
+    save: (Bitmap) -> Unit,
+    actions: (SketchPadActions) -> Unit,
+    navigate: (Screens) -> Unit
+) {
+    val undoVisibility = remember { mutableStateOf(false) }
+    val redoVisibility = remember { mutableStateOf(false) }
+    val colorBarVisibility = remember { mutableStateOf(false) }
+    val sizeBarVisibility = remember { mutableStateOf(false) }
+    val currentColor = remember { mutableStateOf(defaultSelectedColor) }
+    val bg = MaterialTheme.colorScheme.background
+    val currentBgColor = remember { mutableStateOf(bg) }
+    val currentSize = remember { mutableIntStateOf(10) }
+    val colorIsBg = remember { mutableStateOf(false) }
+    val drawController = rememberDrawController()
+    val context = LocalContext.current
+    val openNameSketchDialog = rememberSaveable { mutableStateOf(false) }
+    var art: Bitmap? = null
+
+    Box {
+        Column {
+            DrawBox(
+                drawController = drawController,
+                backgroundColor = currentBgColor.value,
+                modifier = Modifier
+                    .fillMaxSize()
+                    .weight(1f, fill = false),
+                bitmapCallback = { imageBitmap, error ->
+                    if (imageBitmap == null) {
+                        Toast.makeText(context, "No image to save", Toast.LENGTH_SHORT).show()
+                        return@DrawBox
+                    }
+                    art = imageBitmap.asAndroidBitmap()
+                    if (sketch == null) {
+                        openNameSketchDialog.value = true
+                    } else {
+                        save(art!!)
+                        actions(SketchPadActions.UpdateSketch(art!!))
+                    }
+                }
+            ) { undoCount, redoCount ->
+                sizeBarVisibility.value = false
+                colorBarVisibility.value = false
+                undoVisibility.value = undoCount != 0
+                redoVisibility.value = redoCount != 0
+            }
+        }
+
+        ControlsBar(
+            drawController = drawController,
+            onDownloadClick = {
+                drawController.saveBitmap()
+            },
+            onColorClick = {
+                colorBarVisibility.value = when (colorBarVisibility.value) {
+                    false -> true
+                    colorIsBg.value -> true
+                    else -> false
+                }
+                colorIsBg.value = false
+                sizeBarVisibility.value = false
+            },
+            onBgColorClick = {
+                colorBarVisibility.value = when (colorBarVisibility.value) {
+                    false -> true
+                    !colorIsBg.value -> true
+                    else -> false
+                }
+                colorIsBg.value = true
+                sizeBarVisibility.value = false
+            },
+            onSizeClick = {
+                sizeBarVisibility.value = !sizeBarVisibility.value
+                colorBarVisibility.value = false
+            },
+            undoVisibility = undoVisibility,
+            redoVisibility = redoVisibility,
+            colorValue = currentColor,
+            bgColorValue = currentBgColor,
+            sizeValue = currentSize
+        )
+        Card(colors = cardColors(Color.White))  {
+            RangVikalp(
+                isVisible = colorBarVisibility.value,
+                showShades = true
+            ) {
+                if (colorIsBg.value) {
+                    currentBgColor.value = it
+                    drawController.changeBgColor(it)
+                } else {
+                    currentColor.value = it
+                    drawController.changeColor(it)
+                }
+            }
+        }
+        CustomSeekbar(
+            isVisible = sizeBarVisibility.value,
+            progress = currentSize.intValue,
+            progressColor = MaterialTheme.colorScheme.primary.convertToOldColor(),
+            thumbColor = currentColor.value.convertToOldColor()
+        ) {
+            currentSize.intValue = it
+            drawController.changeStrokeWidth(it.toFloat())
+        }
+
+        if (openNameSketchDialog.value && art != null) {
+            NameSketchDialog(
+                art = art!!,
+                onNamed = {
+                    actions(SketchPadActions.SaveSketch(it))
+                    navigate(Screens.Back)
+                },
+                onDismiss = { openNameSketchDialog.value = false }
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.screens.home\r\n\r\nimport androidx.compose.runtime.Composable\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\n\r\n@Composable\r\nfun HomeScreen(navigate: (Screens) -> Unit) {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeScreen.kt	
@@ -1,7 +1,54 @@
 package dev.borisochieng.sketchpad.ui.screens.home
 
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.grid.GridCells
+import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.rounded.Add
+import androidx.compose.material3.Icon
+import androidx.compose.material3.OutlinedButton
+import androidx.compose.material3.Scaffold
+import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import dev.borisochieng.sketchpad.database.Sketch
+import dev.borisochieng.sketchpad.ui.components.HomeTopBar
 import dev.borisochieng.sketchpad.ui.navigation.Screens
 
 @Composable
-fun HomeScreen(navigate: (Screens) -> Unit) {}
\ No newline at end of file
+fun HomeScreen(
+	savedSketches: List<Sketch>,
+	navigate: (Screens) -> Unit
+) {
+	Scaffold(
+		topBar = { HomeTopBar() }
+	) { paddingValues ->
+		LazyVerticalGrid(
+			columns = GridCells.Adaptive(150.dp),
+			modifier = Modifier.padding(start = 10.dp),
+			contentPadding = paddingValues
+		) {
+			item {
+				OutlinedButton(
+					onClick = { navigate(Screens.SketchPad(null)) },
+					modifier = Modifier
+						.fillMaxWidth()
+						.padding(20.dp, 16.dp)
+				) {
+					Icon(Icons.Rounded.Add, null)
+					Text("Create New Sketch", Modifier.padding(start = 10.dp))
+				}
+			}
+
+			items(savedSketches.size) { index ->
+				val sketch = savedSketches[index]
+				SketchPoster(
+					sketch = sketch,
+					onClick = { navigate(Screens.SketchPad(it)) }
+				)
+			}
+		}
+	}
+}
Index: app/src/main/java/dev/borisochieng/sketchpad/toby/SketchPad.kt
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/toby/SketchPad.kt b/app/src/main/java/dev/borisochieng/sketchpad/toby/SketchPad.kt
deleted file mode 100644
--- a/app/src/main/java/dev/borisochieng/sketchpad/toby/SketchPad.kt	
+++ /dev/null	
@@ -1,117 +0,0 @@
-package dev.borisochieng.sketchpad.toby
-
-import android.graphics.Bitmap
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.material3.Card
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.asAndroidBitmap
-import dev.borisochieng.sketchpad.toby.data.convertToOldColor
-import dev.borisochieng.sketchpad.ui.navigation.Screens
-import io.ak1.drawbox.DrawBox
-import io.ak1.drawbox.rememberDrawController
-import io.ak1.rangvikalp.RangVikalp
-import io.ak1.rangvikalp.defaultSelectedColor
-
-@Composable
-fun SketchPadScreen(save: (Bitmap) -> Unit, navigate: (Screens) -> Unit ) {
-    val undoVisibility = remember { mutableStateOf(false) }
-    val redoVisibility = remember { mutableStateOf(false) }
-    val colorBarVisibility = remember { mutableStateOf(false) }
-    val sizeBarVisibility = remember { mutableStateOf(false) }
-    val currentColor = remember { mutableStateOf(defaultSelectedColor) }
-    val bg = MaterialTheme.colorScheme.background
-    val currentBgColor = remember { mutableStateOf(bg) }
-    val currentSize = remember { mutableStateOf(10) }
-    val colorIsBg = remember { mutableStateOf(false) }
-    val drawController = rememberDrawController()
-
-    Box {
-        Column {
-
-            DrawBox(
-                drawController = drawController,
-                backgroundColor = currentBgColor.value,
-                modifier = Modifier
-                    .fillMaxSize()
-                    .weight(1f, fill = false),
-                bitmapCallback = { imageBitmap, error ->
-                    imageBitmap?.let {
-                        save(it.asAndroidBitmap())
-                    }
-                }
-            ) { undoCount, redoCount ->
-                sizeBarVisibility.value = false
-                colorBarVisibility.value = false
-                undoVisibility.value = undoCount != 0
-                redoVisibility.value = redoCount != 0
-            }
-
-
-        }
-        ControlsBar(
-            drawController = drawController,
-            {
-                drawController.saveBitmap()
-            },
-            {
-                colorBarVisibility.value = when (colorBarVisibility.value) {
-                    false -> true
-                    colorIsBg.value -> true
-                    else -> false
-                }
-                colorIsBg.value = false
-                sizeBarVisibility.value = false
-            },
-            {
-                colorBarVisibility.value = when (colorBarVisibility.value) {
-                    false -> true
-                    !colorIsBg.value -> true
-                    else -> false
-                }
-                colorIsBg.value = true
-                sizeBarVisibility.value = false
-            },
-            {
-                sizeBarVisibility.value = !sizeBarVisibility.value
-                colorBarVisibility.value = false
-            },
-            undoVisibility = undoVisibility,
-            redoVisibility = redoVisibility,
-            colorValue = currentColor,
-            bgColorValue = currentBgColor,
-            sizeValue = currentSize
-        )
-        Card(colors = CardDefaults.cardColors(
-            containerColor = Color.White
-        )
-        )  {
-            RangVikalp(isVisible = colorBarVisibility.value, showShades = true) {
-
-                if (colorIsBg.value) {
-                    currentBgColor.value = it
-                    drawController.changeBgColor(it)
-                } else {
-                    currentColor.value = it
-                    drawController.changeColor(it)
-                }
-            }
-        }
-        CustomSeekbar(
-            isVisible = sizeBarVisibility.value,
-            progress = currentSize.value,
-            progressColor = MaterialTheme.colorScheme.primary.convertToOldColor(),
-            thumbColor = currentColor.value.convertToOldColor()
-        ) {
-            currentSize.value = it
-            drawController.changeStrokeWidth(it.toFloat())
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database\r\n\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.StrokeCap\r\nimport androidx.compose.ui.graphics.StrokeJoin\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\nimport java.util.Calendar\r\nimport java.util.Date\r\n\r\n@Entity\r\ndata class Sketch(\r\n\t@PrimaryKey(autoGenerate = true)\r\n\tval id: Int = 0,\r\n\tval name: String,\r\n\tval dateCreated: Date = Calendar.getInstance().time,\r\n\tval lastModified: Date = Calendar.getInstance().time,\r\n\tval paths: List<PathProperties>\r\n)\r\n\r\ndata class PathProperties(\r\n\tvar alpha: Float = 1f,\r\n\tvar color: Color = Color.Black,\r\n\tvar eraseMode: Boolean = false,\r\n\tval start: Offset = Offset.Zero,\r\n\tval end: Offset = Offset.Zero,\r\n\tvar strokeCap: StrokeCap = StrokeCap.Round,\r\n\tvar strokeJoin: StrokeJoin = StrokeJoin.Round,\r\n\tvar strokeWidth: Float = 10f\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/Model.kt	
@@ -1,9 +1,6 @@
 package dev.borisochieng.sketchpad.database
 
-import androidx.compose.ui.geometry.Offset
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.StrokeCap
-import androidx.compose.ui.graphics.StrokeJoin
+import android.graphics.Bitmap
 import androidx.room.Entity
 import androidx.room.PrimaryKey
 import java.util.Calendar
@@ -13,19 +10,8 @@
 data class Sketch(
 	@PrimaryKey(autoGenerate = true)
 	val id: Int = 0,
-	val name: String,
+	val name: String = "",
 	val dateCreated: Date = Calendar.getInstance().time,
 	val lastModified: Date = Calendar.getInstance().time,
-	val paths: List<PathProperties>
+	val art: Bitmap
 )
-
-data class PathProperties(
-	var alpha: Float = 1f,
-	var color: Color = Color.Black,
-	var eraseMode: Boolean = false,
-	val start: Offset = Offset.Zero,
-	val end: Offset = Offset.Zero,
-	var strokeCap: StrokeCap = StrokeCap.Round,
-	var strokeJoin: StrokeJoin = StrokeJoin.Round,
-	var strokeWidth: Float = 10f
-)
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeViewModel.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/HomeViewModel.kt	
@@ -0,0 +1,28 @@
+package dev.borisochieng.sketchpad.ui.screens.home
+
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import dev.borisochieng.sketchpad.database.Sketch
+import dev.borisochieng.sketchpad.database.repository.SketchRepository
+import kotlinx.coroutines.launch
+import org.koin.core.component.KoinComponent
+import org.koin.core.component.inject
+
+class HomeViewModel : ViewModel(), KoinComponent {
+
+	private val sketchRepository by inject<SketchRepository>()
+
+	var savedSketches by mutableStateOf<List<Sketch>>(emptyList()); private set
+
+	init {
+		viewModelScope.launch {
+			sketchRepository.getAllSketches().collect {
+				savedSketches = it
+			}
+		}
+	}
+
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/database/Dao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database\r\n\r\nimport androidx.room.Dao\r\nimport androidx.room.Delete\r\nimport androidx.room.Insert\r\nimport androidx.room.Query\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\n@Dao\r\ninterface SketchDao {\r\n\r\n\t@Query(\"SELECT * FROM sketch\")\r\n\tfun getAllSketches(): Flow<List<Sketch>>\r\n\r\n\t@Query(\"SELECT * FROM sketch WHERE id LIKE :sketchId\")\r\n\tfun getSketch(sketchId: String): Flow<Sketch>\r\n\r\n\t@Insert\r\n\tsuspend fun saveSketch(sketch: Sketch)\r\n\r\n\t@Insert\r\n\tsuspend fun updateSketch(sketch: Sketch)\r\n\r\n\t@Delete\r\n\tsuspend fun deleteSketch(sketch: Sketch)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/Dao.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/Dao.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/Dao.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/Dao.kt	
@@ -9,11 +9,11 @@
 @Dao
 interface SketchDao {
 
-	@Query("SELECT * FROM sketch")
+	@Query("SELECT * FROM sketch ORDER BY lastModified DESC")
 	fun getAllSketches(): Flow<List<Sketch>>
 
 	@Query("SELECT * FROM sketch WHERE id LIKE :sketchId")
-	fun getSketch(sketchId: String): Flow<Sketch>
+	fun getSketch(sketchId: Int): Flow<Sketch>
 
 	@Insert
 	suspend fun saveSketch(sketch: Sketch)
Index: app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database\r\n\r\nimport androidx.room.TypeConverter\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport java.util.Date\r\n\r\nclass TypeConverter {\r\n\r\n\t@TypeConverter\r\n\tfun fromDate(date: Date?): Long? {\r\n\t\treturn date?.time\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun toDate(millisSinceEpoch: Long?): Date? {\r\n\t\treturn millisSinceEpoch?.let {\r\n\t\t\tDate(it)\r\n\t\t}\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun fromPathProperties(paths: List<PathProperties>): String {\r\n\t\tval gson = Gson()\r\n\t\treturn gson.toJson(paths)\r\n\t}\r\n\r\n\t@TypeConverter\r\n\tfun toPathProperties(pathJson: String): List<PathProperties> {\r\n\t\tval gson = Gson()\r\n\t\tval type = object : TypeToken<List<PathProperties>>() {}.type\r\n\t\treturn gson.fromJson(pathJson, type)\r\n\t}\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/TypeConverter.kt	
@@ -1,8 +1,9 @@
 package dev.borisochieng.sketchpad.database
 
+import android.graphics.Bitmap
+import android.graphics.BitmapFactory
 import androidx.room.TypeConverter
-import com.google.gson.Gson
-import com.google.gson.reflect.TypeToken
+import java.io.ByteArrayOutputStream
 import java.util.Date
 
 class TypeConverter {
@@ -20,16 +21,16 @@
 	}
 
 	@TypeConverter
-	fun fromPathProperties(paths: List<PathProperties>): String {
-		val gson = Gson()
-		return gson.toJson(paths)
+	fun fromBitmap(bitmap: Bitmap): ByteArray {
+		val stream = ByteArrayOutputStream()
+		bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
+		return stream.toByteArray()
 	}
 
 	@TypeConverter
-	fun toPathProperties(pathJson: String): List<PathProperties> {
-		val gson = Gson()
-		val type = object : TypeToken<List<PathProperties>>() {}.type
-		return gson.fromJson(pathJson, type)
+	fun toBitmap(byteArray: ByteArray): Bitmap {
+		val bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
+		return bitmap
 	}
 
 }
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/Poster.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/Poster.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/Poster.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/home/Poster.kt	
@@ -0,0 +1,56 @@
+package dev.borisochieng.sketchpad.ui.screens.home
+
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.alpha
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.asImageBitmap
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import dev.borisochieng.sketchpad.database.Sketch
+import dev.borisochieng.sketchpad.utils.Extensions.formatDate
+
+@Composable
+fun SketchPoster(
+	sketch: Sketch,
+	modifier: Modifier = Modifier,
+	onClick: (Int) -> Unit
+) {
+	Column(
+		modifier = modifier
+			.padding(end = 10.dp, bottom = 10.dp)
+			.clip(MaterialTheme.shapes.large)
+			.background(MaterialTheme.colorScheme.scrim)
+			.clickable { onClick(sketch.id) },
+		horizontalAlignment = Alignment.CenterHorizontally
+	) {
+		Image(
+			bitmap = sketch.art.asImageBitmap(),
+			contentDescription = null,
+			modifier = Modifier
+				.fillMaxWidth()
+				.height(120.dp)
+		)
+		Text(
+			text = sketch.name,
+			modifier = Modifier.padding(top = 10.dp)
+		)
+		Text(
+			text = "Last modified: ${sketch.lastModified.formatDate()}",
+			modifier = Modifier
+				.padding(bottom = 10.dp)
+				.alpha(0.8f),
+			fontSize = 14.sp
+		)
+	}
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/NameSketchDialog.kt	
@@ -0,0 +1,61 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard
+
+import android.graphics.Bitmap
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.material3.AlertDialog
+import androidx.compose.material3.Button
+import androidx.compose.material3.OutlinedButton
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import dev.borisochieng.sketchpad.database.Sketch
+import java.util.Calendar
+
+@Composable
+fun NameSketchDialog(
+	art: Bitmap,
+	onNamed: (Sketch) -> Unit,
+	onDismiss: () -> Unit
+) {
+	var name by rememberSaveable { mutableStateOf("") }
+
+	AlertDialog(
+		onDismissRequest = onDismiss,
+		title = { Text("Save as") },
+		text = {
+			OutlinedTextField(
+				value = name,
+				onValueChange = { name = it },
+				modifier = Modifier.fillMaxWidth()
+			)
+		},
+		dismissButton = {
+			OutlinedButton(
+				onClick = onDismiss,
+				modifier = Modifier.fillMaxWidth(0.5f)
+			) {
+				Text("Cancel")
+			}
+		},
+		confirmButton = {
+			Button(
+				onClick = {
+					val sketch = Sketch(
+						name = name,
+						art = art
+					)
+					onNamed(sketch)
+				},
+				modifier = Modifier.fillMaxWidth(0.5f),
+				enabled = name.isNotEmpty()
+			) {
+				Text("Save")
+			}
+		}
+	)
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database.repository\r\n\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\ninterface SketchRepository {\r\n\r\n\tfun getAllSketches(): Flow<List<Sketch>>\r\n\r\n\tfun getSketch(sketchId: String): Flow<Sketch>\r\n\r\n\tsuspend fun saveSketch(sketch: Sketch)\r\n\r\n\tsuspend fun updateSketch(sketch: Sketch)\r\n\r\n\tsuspend fun deleteSketch(sketch: Sketch)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepository.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepository.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepository.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepository.kt	
@@ -7,7 +7,7 @@
 
 	fun getAllSketches(): Flow<List<Sketch>>
 
-	fun getSketch(sketchId: String): Flow<Sketch>
+	fun getSketch(sketchId: Int): Flow<Sketch>
 
 	suspend fun saveSketch(sketch: Sketch)
 
Index: app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.database.repository\r\n\r\nimport dev.borisochieng.sketchpad.database.Sketch\r\nimport dev.borisochieng.sketchpad.database.SketchDao\r\nimport kotlinx.coroutines.flow.Flow\r\nimport org.koin.core.component.KoinComponent\r\nimport org.koin.core.component.inject\r\nimport java.util.Calendar\r\n\r\nclass SketchRepositoryImpl: SketchRepository, KoinComponent {\r\n\r\n\tprivate val sketchDao by inject<SketchDao>()\r\n\r\n\toverride fun getAllSketches(): Flow<List<Sketch>> {\r\n\t\treturn sketchDao.getAllSketches()\r\n\t}\r\n\r\n\toverride fun getSketch(sketchId: String): Flow<Sketch> {\r\n\t\treturn sketchDao.getSketch(sketchId)\r\n\t}\r\n\r\n\toverride suspend fun saveSketch(sketch: Sketch) {\r\n\t\treturn sketchDao.saveSketch(sketch)\r\n\t}\r\n\r\n\toverride suspend fun updateSketch(sketch: Sketch) {\r\n\t\tval updatedSketch = Sketch(\r\n\t\t\tid = sketch.id,\r\n\t\t\tname = sketch.name,\r\n\t\t\tdateCreated = sketch.dateCreated,\r\n\t\t\tlastModified = Calendar.getInstance().time,\r\n\t\t\tpaths = sketch.paths\r\n\t\t)\r\n\t\treturn sketchDao.updateSketch(updatedSketch)\r\n\t}\r\n\r\n\toverride suspend fun deleteSketch(sketch: Sketch) {\r\n\t\treturn sketchDao.deleteSketch(sketch)\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepositoryImpl.kt b/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepositoryImpl.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepositoryImpl.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/database/repository/SketchRepositoryImpl.kt	
@@ -5,7 +5,6 @@
 import kotlinx.coroutines.flow.Flow
 import org.koin.core.component.KoinComponent
 import org.koin.core.component.inject
-import java.util.Calendar
 
 class SketchRepositoryImpl: SketchRepository, KoinComponent {
 
@@ -15,7 +14,7 @@
 		return sketchDao.getAllSketches()
 	}
 
-	override fun getSketch(sketchId: String): Flow<Sketch> {
+	override fun getSketch(sketchId: Int): Flow<Sketch> {
 		return sketchDao.getSketch(sketchId)
 	}
 
@@ -24,14 +23,7 @@
 	}
 
 	override suspend fun updateSketch(sketch: Sketch) {
-		val updatedSketch = Sketch(
-			id = sketch.id,
-			name = sketch.name,
-			dateCreated = sketch.dateCreated,
-			lastModified = Calendar.getInstance().time,
-			paths = sketch.paths
-		)
-		return sketchDao.updateSketch(updatedSketch)
+		return sketchDao.updateSketch(sketch)
 	}
 
 	override suspend fun deleteSketch(sketch: Sketch) {
Index: app/src/main/java/dev/borisochieng/sketchpad/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.di\r\n\r\nimport dev.borisochieng.sketchpad.auth.data.AuthRepositoryImpl\r\nimport dev.borisochieng.sketchpad.auth.domain.AuthRepository\r\nimport dev.borisochieng.sketchpad.auth.presentation.SignUpViewModel\r\nimport org.koin.androidx.viewmodel.dsl.viewModel\r\nimport org.koin.dsl.module\r\n\r\nobject AppModule {\r\n    val appModule = module {\r\n        single<AuthRepository> { AuthRepositoryImpl() }\r\n        viewModel { SignUpViewModel() }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/di/AppModule.kt b/app/src/main/java/dev/borisochieng/sketchpad/di/AppModule.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/di/AppModule.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/di/AppModule.kt	
@@ -3,12 +3,16 @@
 import dev.borisochieng.sketchpad.auth.data.AuthRepositoryImpl
 import dev.borisochieng.sketchpad.auth.domain.AuthRepository
 import dev.borisochieng.sketchpad.auth.presentation.SignUpViewModel
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.SketchPadViewModel
+import dev.borisochieng.sketchpad.ui.screens.home.HomeViewModel
 import org.koin.androidx.viewmodel.dsl.viewModel
 import org.koin.dsl.module
 
 object AppModule {
     val appModule = module {
         single<AuthRepository> { AuthRepositoryImpl() }
+        viewModel { HomeViewModel() }
         viewModel { SignUpViewModel() }
+        viewModel { SketchPadViewModel() }
     }
 }
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadActions.kt	
@@ -0,0 +1,14 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard
+
+import android.graphics.Bitmap
+import dev.borisochieng.sketchpad.database.Sketch
+
+sealed class SketchPadActions {
+
+	data class SaveSketch(val sketch: Sketch) : SketchPadActions()
+
+	data class UpdateSketch(val art: Bitmap) : SketchPadActions()
+
+	data class DeleteSketch(val sketch: Sketch) : SketchPadActions()
+
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.navigationBars\r\nimport androidx.compose.foundation.layout.windowInsetsPadding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.compose.rememberNavController\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.components.NavBar\r\nimport dev.borisochieng.sketchpad.ui.navigation.AppRoute\r\nimport dev.borisochieng.sketchpad.ui.navigation.NavActions\r\nimport dev.borisochieng.sketchpad.toby.Root\r\nimport dev.borisochieng.sketchpad.toby.data.activityChooser\r\nimport dev.borisochieng.sketchpad.toby.data.checkAndAskPermission\r\nimport dev.borisochieng.sketchpad.toby.data.saveImage\r\nimport dev.borisochieng.sketchpad.ui.theme.AppTheme\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.Theme_SketchPad)\r\n        super.onCreate(savedInstanceState)\r\n        //   enableEdgeToEdge()\r\n        setContent {\r\n            Root(window = window) {\r\n                val navController = rememberNavController()\r\n                val navActions = NavActions(navController)\r\n                AppTheme {\r\n                    Scaffold(\r\n                        modifier = Modifier.windowInsetsPadding(WindowInsets.navigationBars),\r\n                        bottomBar = { NavBar(navController) },\r\n                    ) { paddingValues ->\r\n                        AppRoute(\r\n                            navActions = navActions,\r\n                            navController = navController,\r\n                            paddingValues = paddingValues,\r\n                            saveImage = {\r\n                                checkAndAskPermission {\r\n                                    CoroutineScope(Dispatchers.IO).launch {\r\n                                        val uri = saveImage(it)\r\n                                        withContext(Dispatchers.Main) {\r\n                                            startActivity(activityChooser(uri))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/MainActivity.kt	
@@ -13,10 +13,10 @@
 import dev.borisochieng.sketchpad.ui.components.NavBar
 import dev.borisochieng.sketchpad.ui.navigation.AppRoute
 import dev.borisochieng.sketchpad.ui.navigation.NavActions
-import dev.borisochieng.sketchpad.toby.Root
-import dev.borisochieng.sketchpad.toby.data.activityChooser
-import dev.borisochieng.sketchpad.toby.data.checkAndAskPermission
-import dev.borisochieng.sketchpad.toby.data.saveImage
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.Root
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.activityChooser
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.checkAndAskPermission
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.saveImage
 import dev.borisochieng.sketchpad.ui.theme.AppTheme
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
Index: app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt b/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/utils/Extensions.kt	
@@ -0,0 +1,14 @@
+package dev.borisochieng.sketchpad.utils
+
+import java.text.SimpleDateFormat
+import java.util.Date
+import java.util.Locale
+
+object Extensions {
+
+	fun Date.formatDate(): String {
+		val style = SimpleDateFormat("MMM dd, yyyy hh:mma", Locale.getDefault())
+		return style.format(this)
+	}
+
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/theme/Theme.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.theme\r\n\r\nimport android.content.res.Configuration\r\nimport android.os.Build\r\nimport android.view.Window\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.lightColorScheme\r\nimport androidx.compose.material3.darkColorScheme\r\nimport androidx.compose.material3.dynamicDarkColorScheme\r\nimport androidx.compose.material3.dynamicLightColorScheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.Immutable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.core.view.WindowInsetsControllerCompat\r\nimport dev.borisochieng.sketchpad.toby.data.dataStore\r\nimport dev.borisochieng.sketchpad.toby.data.isDarkThemeOn\r\nimport dev.borisochieng.sketchpad.toby.data.themePreferenceKey\r\nimport kotlinx.coroutines.flow.first\r\nimport kotlinx.coroutines.runBlocking\r\n\r\n val lightScheme = lightColorScheme(\r\n    primary = primaryLight,\r\n    onPrimary = onPrimaryLight,\r\n    primaryContainer = primaryContainerLight,\r\n    onPrimaryContainer = onPrimaryContainerLight,\r\n    secondary = secondaryLight,\r\n    onSecondary = onSecondaryLight,\r\n    secondaryContainer = secondaryContainerLight,\r\n    onSecondaryContainer = onSecondaryContainerLight,\r\n    tertiary = tertiaryLight,\r\n    onTertiary = onTertiaryLight,\r\n    tertiaryContainer = tertiaryContainerLight,\r\n    onTertiaryContainer = onTertiaryContainerLight,\r\n    error = errorLight,\r\n    onError = onErrorLight,\r\n    errorContainer = errorContainerLight,\r\n    onErrorContainer = onErrorContainerLight,\r\n    background = backgroundLight,\r\n    onBackground = onBackgroundLight,\r\n    surface = surfaceLight,\r\n    onSurface = onSurfaceLight,\r\n    surfaceVariant = surfaceVariantLight,\r\n    onSurfaceVariant = onSurfaceVariantLight,\r\n    outline = outlineLight,\r\n    outlineVariant = outlineVariantLight,\r\n    scrim = scrimLight,\r\n    inverseSurface = inverseSurfaceLight,\r\n    inverseOnSurface = inverseOnSurfaceLight,\r\n    inversePrimary = inversePrimaryLight,\r\n    surfaceDim = surfaceDimLight,\r\n    surfaceBright = surfaceBrightLight,\r\n    surfaceContainerLowest = surfaceContainerLowestLight,\r\n    surfaceContainerLow = surfaceContainerLowLight,\r\n    surfaceContainer = surfaceContainerLight,\r\n    surfaceContainerHigh = surfaceContainerHighLight,\r\n    surfaceContainerHighest = surfaceContainerHighestLight,\r\n)\r\n\r\nprivate val darkScheme = darkColorScheme(\r\n    primary = primaryDark,\r\n    onPrimary = onPrimaryDark,\r\n    primaryContainer = primaryContainerDark,\r\n    onPrimaryContainer = onPrimaryContainerDark,\r\n    secondary = secondaryDark,\r\n    onSecondary = onSecondaryDark,\r\n    secondaryContainer = secondaryContainerDark,\r\n    onSecondaryContainer = onSecondaryContainerDark,\r\n    tertiary = tertiaryDark,\r\n    onTertiary = onTertiaryDark,\r\n    tertiaryContainer = tertiaryContainerDark,\r\n    onTertiaryContainer = onTertiaryContainerDark,\r\n    error = errorDark,\r\n    onError = onErrorDark,\r\n    errorContainer = errorContainerDark,\r\n    onErrorContainer = onErrorContainerDark,\r\n    background = backgroundDark,\r\n    onBackground = onBackgroundDark,\r\n    surface = surfaceDark,\r\n    onSurface = onSurfaceDark,\r\n    surfaceVariant = surfaceVariantDark,\r\n    onSurfaceVariant = onSurfaceVariantDark,\r\n    outline = outlineDark,\r\n    outlineVariant = outlineVariantDark,\r\n    scrim = scrimDark,\r\n    inverseSurface = inverseSurfaceDark,\r\n    inverseOnSurface = inverseOnSurfaceDark,\r\n    inversePrimary = inversePrimaryDark,\r\n    surfaceDim = surfaceDimDark,\r\n    surfaceBright = surfaceBrightDark,\r\n    surfaceContainerLowest = surfaceContainerLowestDark,\r\n    surfaceContainerLow = surfaceContainerLowDark,\r\n    surfaceContainer = surfaceContainerDark,\r\n    surfaceContainerHigh = surfaceContainerHighDark,\r\n    surfaceContainerHighest = surfaceContainerHighestDark,\r\n)\r\n\r\nprivate val mediumContrastLightColorScheme = lightColorScheme(\r\n    primary = primaryLightMediumContrast,\r\n    onPrimary = onPrimaryLightMediumContrast,\r\n    primaryContainer = primaryContainerLightMediumContrast,\r\n    onPrimaryContainer = onPrimaryContainerLightMediumContrast,\r\n    secondary = secondaryLightMediumContrast,\r\n    onSecondary = onSecondaryLightMediumContrast,\r\n    secondaryContainer = secondaryContainerLightMediumContrast,\r\n    onSecondaryContainer = onSecondaryContainerLightMediumContrast,\r\n    tertiary = tertiaryLightMediumContrast,\r\n    onTertiary = onTertiaryLightMediumContrast,\r\n    tertiaryContainer = tertiaryContainerLightMediumContrast,\r\n    onTertiaryContainer = onTertiaryContainerLightMediumContrast,\r\n    error = errorLightMediumContrast,\r\n    onError = onErrorLightMediumContrast,\r\n    errorContainer = errorContainerLightMediumContrast,\r\n    onErrorContainer = onErrorContainerLightMediumContrast,\r\n    background = backgroundLightMediumContrast,\r\n    onBackground = onBackgroundLightMediumContrast,\r\n    surface = surfaceLightMediumContrast,\r\n    onSurface = onSurfaceLightMediumContrast,\r\n    surfaceVariant = surfaceVariantLightMediumContrast,\r\n    onSurfaceVariant = onSurfaceVariantLightMediumContrast,\r\n    outline = outlineLightMediumContrast,\r\n    outlineVariant = outlineVariantLightMediumContrast,\r\n    scrim = scrimLightMediumContrast,\r\n    inverseSurface = inverseSurfaceLightMediumContrast,\r\n    inverseOnSurface = inverseOnSurfaceLightMediumContrast,\r\n    inversePrimary = inversePrimaryLightMediumContrast,\r\n    surfaceDim = surfaceDimLightMediumContrast,\r\n    surfaceBright = surfaceBrightLightMediumContrast,\r\n    surfaceContainerLowest = surfaceContainerLowestLightMediumContrast,\r\n    surfaceContainerLow = surfaceContainerLowLightMediumContrast,\r\n    surfaceContainer = surfaceContainerLightMediumContrast,\r\n    surfaceContainerHigh = surfaceContainerHighLightMediumContrast,\r\n    surfaceContainerHighest = surfaceContainerHighestLightMediumContrast,\r\n)\r\n\r\nprivate val highContrastLightColorScheme = lightColorScheme(\r\n    primary = primaryLightHighContrast,\r\n    onPrimary = onPrimaryLightHighContrast,\r\n    primaryContainer = primaryContainerLightHighContrast,\r\n    onPrimaryContainer = onPrimaryContainerLightHighContrast,\r\n    secondary = secondaryLightHighContrast,\r\n    onSecondary = onSecondaryLightHighContrast,\r\n    secondaryContainer = secondaryContainerLightHighContrast,\r\n    onSecondaryContainer = onSecondaryContainerLightHighContrast,\r\n    tertiary = tertiaryLightHighContrast,\r\n    onTertiary = onTertiaryLightHighContrast,\r\n    tertiaryContainer = tertiaryContainerLightHighContrast,\r\n    onTertiaryContainer = onTertiaryContainerLightHighContrast,\r\n    error = errorLightHighContrast,\r\n    onError = onErrorLightHighContrast,\r\n    errorContainer = errorContainerLightHighContrast,\r\n    onErrorContainer = onErrorContainerLightHighContrast,\r\n    background = backgroundLightHighContrast,\r\n    onBackground = onBackgroundLightHighContrast,\r\n    surface = surfaceLightHighContrast,\r\n    onSurface = onSurfaceLightHighContrast,\r\n    surfaceVariant = surfaceVariantLightHighContrast,\r\n    onSurfaceVariant = onSurfaceVariantLightHighContrast,\r\n    outline = outlineLightHighContrast,\r\n    outlineVariant = outlineVariantLightHighContrast,\r\n    scrim = scrimLightHighContrast,\r\n    inverseSurface = inverseSurfaceLightHighContrast,\r\n    inverseOnSurface = inverseOnSurfaceLightHighContrast,\r\n    inversePrimary = inversePrimaryLightHighContrast,\r\n    surfaceDim = surfaceDimLightHighContrast,\r\n    surfaceBright = surfaceBrightLightHighContrast,\r\n    surfaceContainerLowest = surfaceContainerLowestLightHighContrast,\r\n    surfaceContainerLow = surfaceContainerLowLightHighContrast,\r\n    surfaceContainer = surfaceContainerLightHighContrast,\r\n    surfaceContainerHigh = surfaceContainerHighLightHighContrast,\r\n    surfaceContainerHighest = surfaceContainerHighestLightHighContrast,\r\n)\r\n\r\nprivate val mediumContrastDarkColorScheme = darkColorScheme(\r\n    primary = primaryDarkMediumContrast,\r\n    onPrimary = onPrimaryDarkMediumContrast,\r\n    primaryContainer = primaryContainerDarkMediumContrast,\r\n    onPrimaryContainer = onPrimaryContainerDarkMediumContrast,\r\n    secondary = secondaryDarkMediumContrast,\r\n    onSecondary = onSecondaryDarkMediumContrast,\r\n    secondaryContainer = secondaryContainerDarkMediumContrast,\r\n    onSecondaryContainer = onSecondaryContainerDarkMediumContrast,\r\n    tertiary = tertiaryDarkMediumContrast,\r\n    onTertiary = onTertiaryDarkMediumContrast,\r\n    tertiaryContainer = tertiaryContainerDarkMediumContrast,\r\n    onTertiaryContainer = onTertiaryContainerDarkMediumContrast,\r\n    error = errorDarkMediumContrast,\r\n    onError = onErrorDarkMediumContrast,\r\n    errorContainer = errorContainerDarkMediumContrast,\r\n    onErrorContainer = onErrorContainerDarkMediumContrast,\r\n    background = backgroundDarkMediumContrast,\r\n    onBackground = onBackgroundDarkMediumContrast,\r\n    surface = surfaceDarkMediumContrast,\r\n    onSurface = onSurfaceDarkMediumContrast,\r\n    surfaceVariant = surfaceVariantDarkMediumContrast,\r\n    onSurfaceVariant = onSurfaceVariantDarkMediumContrast,\r\n    outline = outlineDarkMediumContrast,\r\n    outlineVariant = outlineVariantDarkMediumContrast,\r\n    scrim = scrimDarkMediumContrast,\r\n    inverseSurface = inverseSurfaceDarkMediumContrast,\r\n    inverseOnSurface = inverseOnSurfaceDarkMediumContrast,\r\n    inversePrimary = inversePrimaryDarkMediumContrast,\r\n    surfaceDim = surfaceDimDarkMediumContrast,\r\n    surfaceBright = surfaceBrightDarkMediumContrast,\r\n    surfaceContainerLowest = surfaceContainerLowestDarkMediumContrast,\r\n    surfaceContainerLow = surfaceContainerLowDarkMediumContrast,\r\n    surfaceContainer = surfaceContainerDarkMediumContrast,\r\n    surfaceContainerHigh = surfaceContainerHighDarkMediumContrast,\r\n    surfaceContainerHighest = surfaceContainerHighestDarkMediumContrast,\r\n)\r\n\r\nprivate val highContrastDarkColorScheme = darkColorScheme(\r\n    primary = primaryDarkHighContrast,\r\n    onPrimary = onPrimaryDarkHighContrast,\r\n    primaryContainer = primaryContainerDarkHighContrast,\r\n    onPrimaryContainer = onPrimaryContainerDarkHighContrast,\r\n    secondary = secondaryDarkHighContrast,\r\n    onSecondary = onSecondaryDarkHighContrast,\r\n    secondaryContainer = secondaryContainerDarkHighContrast,\r\n    onSecondaryContainer = onSecondaryContainerDarkHighContrast,\r\n    tertiary = tertiaryDarkHighContrast,\r\n    onTertiary = onTertiaryDarkHighContrast,\r\n    tertiaryContainer = tertiaryContainerDarkHighContrast,\r\n    onTertiaryContainer = onTertiaryContainerDarkHighContrast,\r\n    error = errorDarkHighContrast,\r\n    onError = onErrorDarkHighContrast,\r\n    errorContainer = errorContainerDarkHighContrast,\r\n    onErrorContainer = onErrorContainerDarkHighContrast,\r\n    background = backgroundDarkHighContrast,\r\n    onBackground = onBackgroundDarkHighContrast,\r\n    surface = surfaceDarkHighContrast,\r\n    onSurface = onSurfaceDarkHighContrast,\r\n    surfaceVariant = surfaceVariantDarkHighContrast,\r\n    onSurfaceVariant = onSurfaceVariantDarkHighContrast,\r\n    outline = outlineDarkHighContrast,\r\n    outlineVariant = outlineVariantDarkHighContrast,\r\n    scrim = scrimDarkHighContrast,\r\n    inverseSurface = inverseSurfaceDarkHighContrast,\r\n    inverseOnSurface = inverseOnSurfaceDarkHighContrast,\r\n    inversePrimary = inversePrimaryDarkHighContrast,\r\n    surfaceDim = surfaceDimDarkHighContrast,\r\n    surfaceBright = surfaceBrightDarkHighContrast,\r\n    surfaceContainerLowest = surfaceContainerLowestDarkHighContrast,\r\n    surfaceContainerLow = surfaceContainerLowDarkHighContrast,\r\n    surfaceContainer = surfaceContainerDarkHighContrast,\r\n    surfaceContainerHigh = surfaceContainerHighDarkHighContrast,\r\n    surfaceContainerHighest = surfaceContainerHighestDarkHighContrast,\r\n)\r\n\r\n@Immutable\r\ndata class ColorFamily(\r\n    val color: Color,\r\n    val onColor: Color,\r\n    val colorContainer: Color,\r\n    val onColorContainer: Color\r\n)\r\n\r\nval unspecified_scheme = ColorFamily(\r\n    Color.Unspecified, Color.Unspecified, Color.Unspecified, Color.Unspecified\r\n)\r\n\r\n@Composable\r\nfun AppTheme(\r\n    darkTheme: Boolean = isSystemInDarkTheme(),\r\n    // Dynamic color is available on Android 12+\r\n    dynamicColor: Boolean = true,\r\n    content: @Composable() () -> Unit\r\n) {\r\n  val colorScheme = when {\r\n      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {\r\n          val context = LocalContext.current\r\n          if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)\r\n      }\r\n      \r\n      darkTheme -> darkScheme\r\n      else -> lightScheme\r\n  }\r\n\r\n  MaterialTheme(\r\n    colorScheme = colorScheme,\r\n    typography = AppTypography,\r\n    content = content\r\n  )\r\n}\r\n\r\n\r\n@Composable\r\nfun isSystemInDarkThemeCustom(): Boolean {\r\n    val context = LocalContext.current\r\n    val exampleData = runBlocking { context.dataStore.data.first() }\r\n    val theme = context.isDarkThemeOn().collectAsState(initial = exampleData[themePreferenceKey] ?: 0)\r\n    return when (theme.value) {\r\n        2 -> true\r\n        1 -> false\r\n        else -> context.resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK == Configuration.UI_MODE_NIGHT_YES\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Window.StatusBarConfig(darkTheme: Boolean) {\r\n    WindowInsetsControllerCompat(this, this.decorView).isAppearanceLightStatusBars =\r\n        !darkTheme\r\n    this.statusBarColor = MaterialTheme.colorScheme.background.toArgb()\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/theme/Theme.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/theme/Theme.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/theme/Theme.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/theme/Theme.kt	
@@ -16,9 +16,9 @@
 import androidx.compose.ui.graphics.toArgb
 import androidx.compose.ui.platform.LocalContext
 import androidx.core.view.WindowInsetsControllerCompat
-import dev.borisochieng.sketchpad.toby.data.dataStore
-import dev.borisochieng.sketchpad.toby.data.isDarkThemeOn
-import dev.borisochieng.sketchpad.toby.data.themePreferenceKey
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.dataStore
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.isDarkThemeOn
+import dev.borisochieng.sketchpad.ui.screens.drawingboard.data.themePreferenceKey
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.runBlocking
 
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/screens/drawingboard/SketchPadViewModel.kt	
@@ -0,0 +1,64 @@
+package dev.borisochieng.sketchpad.ui.screens.drawingboard
+
+import android.graphics.Bitmap
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import dev.borisochieng.sketchpad.database.Sketch
+import dev.borisochieng.sketchpad.database.repository.SketchRepository
+import kotlinx.coroutines.launch
+import org.koin.core.component.KoinComponent
+import org.koin.core.component.inject
+
+class SketchPadViewModel : ViewModel(), KoinComponent {
+
+	private val sketchRepository by inject<SketchRepository>()
+
+	var sketch by mutableStateOf<Sketch?>(null); private set
+
+	fun fetchSketch(sketchId: Int?) {
+		sketch = null
+		if (sketchId == null) return
+		viewModelScope.launch {
+			sketchRepository.getSketch(sketchId).collect {
+				sketch = it
+			}
+		}
+	}
+
+	fun actions(action: SketchPadActions) {
+		when (action) {
+			is SketchPadActions.SaveSketch -> saveSketch(action.sketch)
+			is SketchPadActions.UpdateSketch -> updateSketch(action.art)
+			is SketchPadActions.DeleteSketch -> deleteSketch(action.sketch)
+		}
+	}
+
+	private fun saveSketch(sketch: Sketch) {
+		viewModelScope.launch {
+			sketchRepository.saveSketch(sketch)
+		}
+	}
+
+	private fun updateSketch(art: Bitmap) {
+		viewModelScope.launch {
+			if (sketch == null) return@launch
+			val updatedSketch = Sketch(
+				id = sketch!!.id,
+				name = sketch!!.name,
+				dateCreated = sketch!!.dateCreated,
+				art = art
+			)
+			sketchRepository.updateSketch(updatedSketch)
+		}
+	}
+
+	private fun deleteSketch(sketchToDelete: Sketch) {
+		viewModelScope.launch {
+			sketchRepository.deleteSketch(sketchToDelete)
+		}
+	}
+
+}
\ No newline at end of file
Index: app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dev.borisochieng.sketchpad.ui.components\r\n\r\nimport android.annotation.SuppressLint\r\nimport androidx.annotation.StringRes\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.animation.ExitTransition\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.slideInVertically\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Home\r\nimport androidx.compose.material.icons.outlined.Person\r\nimport androidx.compose.material.icons.outlined.Settings\r\nimport androidx.compose.material.icons.rounded.ArrowBackIosNew\r\nimport androidx.compose.material.icons.rounded.Home\r\nimport androidx.compose.material.icons.rounded.Person\r\nimport androidx.compose.material.icons.rounded.Settings\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.MaterialTheme.colorScheme\r\nimport androidx.compose.material3.NavigationBarDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.NavGraph.Companion.findStartDestination\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport dev.borisochieng.sketchpad.R\r\nimport dev.borisochieng.sketchpad.ui.navigation.AppRoute\r\nimport dev.borisochieng.sketchpad.ui.navigation.Screens\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TopBar(\r\n\ttitle: String,\r\n\tnavigate: (Screens) -> Unit\r\n) {\r\n\tTopAppBar(\r\n\t\ttitle = { Text(title) },\r\n\t\tnavigationIcon = {\r\n\t\t\tIconButton(onClick = { navigate(Screens.Back) }) {\r\n\t\t\t\tIcon(\r\n\t\t\t\t\timageVector = Icons.Rounded.ArrowBackIosNew,\r\n\t\t\t\t\tcontentDescription = stringResource(R.string.back)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n}\r\n\r\n@Composable\r\nfun NavBar(\r\n\tnavController: NavController,\r\n\tmodifier: Modifier = Modifier\r\n) {\r\n\tval navBackStackEntry = navController.currentBackStackEntryAsState()\r\n\tval currentRoute = navBackStackEntry.value?.destination?.route\r\n\tval homeScreens = setOf(AppRoute.HomeScreen, AppRoute.SettingsScreen, AppRoute.ProfileScreen).map { it.route }\r\n\tval inHomeScreens = currentRoute in homeScreens\r\n\tAnimatedVisibility(\r\n\t\tvisible = inHomeScreens,\r\n\t\tenter = slideInVertically(tween(durationMillis = 350, delayMillis = 1000)) { it },\r\n\t\texit = ExitTransition.None\r\n\t) {\r\n\t\tNavBarVisuals(navController, modifier)\r\n\t}\r\n}\r\n\r\n@SuppressLint(\"RestrictedApi\")\r\n@Composable\r\nprivate fun NavBarVisuals(\r\n\tnavController: NavController,\r\n\tmodifier: Modifier = Modifier\r\n) {\r\n\tval navBackStackEntry = navController.currentBackStackEntryAsState()\r\n\tval currentRoute = navBackStackEntry.value?.destination?.route\r\n\tval backStack = navController.currentBackStack.collectAsState().value.map { it.destination.route }\r\n\r\n\tRow(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.padding(16.dp)\r\n\t\t\t.clip(MaterialTheme.shapes.large)\r\n\t\t\t.background(NavigationBarDefaults.containerColor),\r\n\t\thorizontalArrangement = Arrangement.Center,\r\n\t\tverticalAlignment = Alignment.CenterVertically\r\n\t) {\r\n\t\tNavBarItems.entries.forEach { item ->\r\n\t\t\tval inBackStack = item.route == currentRoute || item.route in backStack\r\n\t\t\tval selected = when (item) {\r\n\t\t\t\tNavBarItems.Home -> {\r\n\t\t\t\t\tval noHomeScreenInStack = NavBarItems.entries.filter { it != NavBarItems.Home }\r\n\t\t\t\t\t\t.all { it.route !in backStack }\r\n\t\t\t\t\tinBackStack && noHomeScreenInStack\r\n\t\t\t\t}\r\n\t\t\t\telse -> inBackStack\r\n\t\t\t}\r\n\r\n\t\t\tNavigationBarItem(\r\n\t\t\t\tselected = selected,\r\n\t\t\t\tselectedIcon = item.selectedIcon,\r\n\t\t\t\tunselectedIcon = item.unselectedIcon,\r\n\t\t\t\tlabel = stringResource(item.title),\r\n\t\t\t\tmodifier = Modifier.weight(1f),\r\n\t\t\t\tonClick = {\r\n\t\t\t\t\tnavController.navigate(item.route) {\r\n\t\t\t\t\t\tpopUpTo(navController.graph.findStartDestination().id) {\r\n\t\t\t\t\t\t\tsaveState = item.route != currentRoute\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlaunchSingleTop = true\r\n\t\t\t\t\t\trestoreState = true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@Composable\r\nprivate fun NavigationBarItem(\r\n\tselected: Boolean,\r\n\tselectedIcon: ImageVector,\r\n\tunselectedIcon: ImageVector,\r\n\tlabel: String,\r\n\tmodifier: Modifier = Modifier,\r\n\tonClick: () -> Unit\r\n) {\r\n\tval color = if (selected) colorScheme.primary else colorScheme.onBackground\r\n\r\n\tColumn(\r\n\t\tmodifier = modifier\r\n\t\t\t.fillMaxWidth()\r\n\t\t\t.clickable { onClick() }\r\n\t\t\t.padding(vertical = 6.dp),\r\n\t\thorizontalAlignment = Alignment.CenterHorizontally\r\n\t) {\r\n\t\tIcon(\r\n\t\t\timageVector = if (selected) selectedIcon else unselectedIcon,\r\n\t\t\tcontentDescription = label,\r\n\t\t\tmodifier = Modifier.padding(start = 12.5.dp, end = 12.5.dp, bottom = 4.dp),\r\n\t\t\ttint = color\r\n\t\t)\r\n\t\tText(text = label, color = color)\r\n\t}\r\n}\r\n\r\nprivate enum class NavBarItems(\r\n\t@StringRes val title: Int,\r\n\tval selectedIcon: ImageVector,\r\n\tval unselectedIcon: ImageVector,\r\n\tval route: String\r\n) {\r\n\tHome(\r\n\t\ttitle = R.string.home,\r\n\t\tselectedIcon = Icons.Rounded.Home,\r\n\t\tunselectedIcon = Icons.Outlined.Home,\r\n\t\troute = AppRoute.HomeScreen.route\r\n\t),\r\n\tProfile(\r\n\t\ttitle = R.string.profile,\r\n\t\tselectedIcon = Icons.Rounded.Person,\r\n\t\tunselectedIcon = Icons.Outlined.Person,\r\n\t\troute = AppRoute.ProfileScreen.route\r\n\t),\r\n\tSettings(\r\n\t\ttitle = R.string.settings,\r\n\t\tselectedIcon = Icons.Rounded.Settings,\r\n\t\tunselectedIcon = Icons.Outlined.Settings,\r\n\t\troute = AppRoute.SettingsScreen.route\r\n\t)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt b/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt
--- a/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt	
+++ b/app/src/main/java/dev/borisochieng/sketchpad/ui/components/AppBars.kt	
@@ -17,13 +17,11 @@
 import androidx.compose.material.icons.outlined.Home
 import androidx.compose.material.icons.outlined.Person
 import androidx.compose.material.icons.outlined.Settings
-import androidx.compose.material.icons.rounded.ArrowBackIosNew
 import androidx.compose.material.icons.rounded.Home
 import androidx.compose.material.icons.rounded.Person
 import androidx.compose.material.icons.rounded.Settings
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.Icon
-import androidx.compose.material3.IconButton
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.MaterialTheme.colorScheme
 import androidx.compose.material3.NavigationBarDefaults
@@ -35,6 +33,7 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
 import androidx.compose.ui.graphics.vector.ImageVector
+import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.unit.dp
 import androidx.navigation.NavController
@@ -42,23 +41,16 @@
 import androidx.navigation.compose.currentBackStackEntryAsState
 import dev.borisochieng.sketchpad.R
 import dev.borisochieng.sketchpad.ui.navigation.AppRoute
-import dev.borisochieng.sketchpad.ui.navigation.Screens
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
-fun TopBar(
-	title: String,
-	navigate: (Screens) -> Unit
-) {
+fun HomeTopBar() {
 	TopAppBar(
-		title = { Text(title) },
-		navigationIcon = {
-			IconButton(onClick = { navigate(Screens.Back) }) {
-				Icon(
-					imageVector = Icons.Rounded.ArrowBackIosNew,
-					contentDescription = stringResource(R.string.back)
-				)
-			}
+		title = {
+			Icon(
+				painter = painterResource(R.drawable.logo),
+				contentDescription = stringResource(R.string.app_name)
+			)
 		}
 	)
 }
